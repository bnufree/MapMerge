// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#ifndef PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED

#include <string>
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

class singleVideoBlock;
class singleVideoBlocks;
class RadarHistoryRect;
class RadarHistoryRects;
class RadarRect;
class RadarRects;
class RadarVideo;
class RadarVideoPoint;

// ===================================================================

class singleVideoBlock : public ::google::protobuf::Message {
 public:
  singleVideoBlock();
  virtual ~singleVideoBlock();

  singleVideoBlock(const singleVideoBlock& from);

  inline singleVideoBlock& operator=(const singleVideoBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const singleVideoBlock& default_instance();

  void Swap(singleVideoBlock* other);

  // implements Message ----------------------------------------------

  singleVideoBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const singleVideoBlock& from);
  void MergeFrom(const singleVideoBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.singleVideoBlock)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static singleVideoBlock* default_instance_;
};
// -------------------------------------------------------------------

class singleVideoBlocks : public ::google::protobuf::Message {
 public:
  singleVideoBlocks();
  virtual ~singleVideoBlocks();

  singleVideoBlocks(const singleVideoBlocks& from);

  inline singleVideoBlocks& operator=(const singleVideoBlocks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const singleVideoBlocks& default_instance();

  void Swap(singleVideoBlocks* other);

  // implements Message ----------------------------------------------

  singleVideoBlocks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const singleVideoBlocks& from);
  void MergeFrom(const singleVideoBlocks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
  inline int block_size() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::singleVideoBlock& block(int index) const;
  inline ::com::zhichenhaixin::proto::singleVideoBlock* mutable_block(int index);
  inline ::com::zhichenhaixin::proto::singleVideoBlock* add_block();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
      block() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
      mutable_block();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.singleVideoBlocks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock > block_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static singleVideoBlocks* default_instance_;
};
// -------------------------------------------------------------------

class RadarHistoryRect : public ::google::protobuf::Message {
 public:
  RadarHistoryRect();
  virtual ~RadarHistoryRect();

  RadarHistoryRect(const RadarHistoryRect& from);

  inline RadarHistoryRect& operator=(const RadarHistoryRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarHistoryRect& default_instance();

  void Swap(RadarHistoryRect* other);

  // implements Message ----------------------------------------------

  RadarHistoryRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarHistoryRect& from);
  void MergeFrom(const RadarHistoryRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rectNumber = 1;
  inline bool has_rectnumber() const;
  inline void clear_rectnumber();
  static const int kRectNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 rectnumber() const;
  inline void set_rectnumber(::google::protobuf::uint32 value);

  // required double topLeftlatitude = 2;
  inline bool has_topleftlatitude() const;
  inline void clear_topleftlatitude();
  static const int kTopLeftlatitudeFieldNumber = 2;
  inline double topleftlatitude() const;
  inline void set_topleftlatitude(double value);

  // required double topLeftlongitude = 3;
  inline bool has_topleftlongitude() const;
  inline void clear_topleftlongitude();
  static const int kTopLeftlongitudeFieldNumber = 3;
  inline double topleftlongitude() const;
  inline void set_topleftlongitude(double value);

  // required double bottomRightlatitude = 4;
  inline bool has_bottomrightlatitude() const;
  inline void clear_bottomrightlatitude();
  static const int kBottomRightlatitudeFieldNumber = 4;
  inline double bottomrightlatitude() const;
  inline void set_bottomrightlatitude(double value);

  // required double bottomRightlongitude = 5;
  inline bool has_bottomrightlongitude() const;
  inline void clear_bottomrightlongitude();
  static const int kBottomRightlongitudeFieldNumber = 5;
  inline double bottomrightlongitude() const;
  inline void set_bottomrightlongitude(double value);

  // required double centerlatitude = 6;
  inline bool has_centerlatitude() const;
  inline void clear_centerlatitude();
  static const int kCenterlatitudeFieldNumber = 6;
  inline double centerlatitude() const;
  inline void set_centerlatitude(double value);

  // required double centerlongitude = 7;
  inline bool has_centerlongitude() const;
  inline void clear_centerlongitude();
  static const int kCenterlongitudeFieldNumber = 7;
  inline double centerlongitude() const;
  inline void set_centerlongitude(double value);

  // required float timeOfDay = 8;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 8;
  inline float timeofday() const;
  inline void set_timeofday(float value);

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
  inline bool has_blocks() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 9;
  inline const ::com::zhichenhaixin::proto::singleVideoBlocks& blocks() const;
  inline ::com::zhichenhaixin::proto::singleVideoBlocks* mutable_blocks();
  inline ::com::zhichenhaixin::proto::singleVideoBlocks* release_blocks();
  inline void set_allocated_blocks(::com::zhichenhaixin::proto::singleVideoBlocks* blocks);

  // optional double startlatitude = 10;
  inline bool has_startlatitude() const;
  inline void clear_startlatitude();
  static const int kStartlatitudeFieldNumber = 10;
  inline double startlatitude() const;
  inline void set_startlatitude(double value);

  // optional double startlongitude = 11;
  inline bool has_startlongitude() const;
  inline void clear_startlongitude();
  static const int kStartlongitudeFieldNumber = 11;
  inline double startlongitude() const;
  inline void set_startlongitude(double value);

  // optional double endlatitude = 12;
  inline bool has_endlatitude() const;
  inline void clear_endlatitude();
  static const int kEndlatitudeFieldNumber = 12;
  inline double endlatitude() const;
  inline void set_endlatitude(double value);

  // optional double endlongitude = 13;
  inline bool has_endlongitude() const;
  inline void clear_endlongitude();
  static const int kEndlongitudeFieldNumber = 13;
  inline double endlongitude() const;
  inline void set_endlongitude(double value);

  // optional double angle = 14;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 14;
  inline double angle() const;
  inline void set_angle(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryRect)
 private:
  inline void set_has_rectnumber();
  inline void clear_has_rectnumber();
  inline void set_has_topleftlatitude();
  inline void clear_has_topleftlatitude();
  inline void set_has_topleftlongitude();
  inline void clear_has_topleftlongitude();
  inline void set_has_bottomrightlatitude();
  inline void clear_has_bottomrightlatitude();
  inline void set_has_bottomrightlongitude();
  inline void clear_has_bottomrightlongitude();
  inline void set_has_centerlatitude();
  inline void clear_has_centerlatitude();
  inline void set_has_centerlongitude();
  inline void clear_has_centerlongitude();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_blocks();
  inline void clear_has_blocks();
  inline void set_has_startlatitude();
  inline void clear_has_startlatitude();
  inline void set_has_startlongitude();
  inline void clear_has_startlongitude();
  inline void set_has_endlatitude();
  inline void clear_has_endlatitude();
  inline void set_has_endlongitude();
  inline void clear_has_endlongitude();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double topleftlatitude_;
  double topleftlongitude_;
  double bottomrightlatitude_;
  ::google::protobuf::uint32 rectnumber_;
  float timeofday_;
  double bottomrightlongitude_;
  double centerlatitude_;
  double centerlongitude_;
  ::com::zhichenhaixin::proto::singleVideoBlocks* blocks_;
  double startlatitude_;
  double startlongitude_;
  double endlatitude_;
  double endlongitude_;
  double angle_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarHistoryRect* default_instance_;
};
// -------------------------------------------------------------------

class RadarHistoryRects : public ::google::protobuf::Message {
 public:
  RadarHistoryRects();
  virtual ~RadarHistoryRects();

  RadarHistoryRects(const RadarHistoryRects& from);

  inline RadarHistoryRects& operator=(const RadarHistoryRects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarHistoryRects& default_instance();

  void Swap(RadarHistoryRects* other);

  // implements Message ----------------------------------------------

  RadarHistoryRects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarHistoryRects& from);
  void MergeFrom(const RadarHistoryRects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
  inline int rects_size() const;
  inline void clear_rects();
  static const int kRectsFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarHistoryRect& rects(int index) const;
  inline ::com::zhichenhaixin::proto::RadarHistoryRect* mutable_rects(int index);
  inline ::com::zhichenhaixin::proto::RadarHistoryRect* add_rects();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryRect >&
      rects() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryRect >*
      mutable_rects();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryRects)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryRect > rects_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarHistoryRects* default_instance_;
};
// -------------------------------------------------------------------

class RadarRect : public ::google::protobuf::Message {
 public:
  RadarRect();
  virtual ~RadarRect();

  RadarRect(const RadarRect& from);

  inline RadarRect& operator=(const RadarRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRect& default_instance();

  void Swap(RadarRect* other);

  // implements Message ----------------------------------------------

  RadarRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRect& from);
  void MergeFrom(const RadarRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rectNumber = 1;
  inline bool has_rectnumber() const;
  inline void clear_rectnumber();
  static const int kRectNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 rectnumber() const;
  inline void set_rectnumber(::google::protobuf::uint32 value);

  // required double topLeftlatitude = 2;
  inline bool has_topleftlatitude() const;
  inline void clear_topleftlatitude();
  static const int kTopLeftlatitudeFieldNumber = 2;
  inline double topleftlatitude() const;
  inline void set_topleftlatitude(double value);

  // required double topLeftlongitude = 3;
  inline bool has_topleftlongitude() const;
  inline void clear_topleftlongitude();
  static const int kTopLeftlongitudeFieldNumber = 3;
  inline double topleftlongitude() const;
  inline void set_topleftlongitude(double value);

  // required double bottomRightlatitude = 4;
  inline bool has_bottomrightlatitude() const;
  inline void clear_bottomrightlatitude();
  static const int kBottomRightlatitudeFieldNumber = 4;
  inline double bottomrightlatitude() const;
  inline void set_bottomrightlatitude(double value);

  // required double bottomRightlongitude = 5;
  inline bool has_bottomrightlongitude() const;
  inline void clear_bottomrightlongitude();
  static const int kBottomRightlongitudeFieldNumber = 5;
  inline double bottomrightlongitude() const;
  inline void set_bottomrightlongitude(double value);

  // required double centerlatitude = 6;
  inline bool has_centerlatitude() const;
  inline void clear_centerlatitude();
  static const int kCenterlatitudeFieldNumber = 6;
  inline double centerlatitude() const;
  inline void set_centerlatitude(double value);

  // required double centerlongitude = 7;
  inline bool has_centerlongitude() const;
  inline void clear_centerlongitude();
  static const int kCenterlongitudeFieldNumber = 7;
  inline double centerlongitude() const;
  inline void set_centerlongitude(double value);

  // required float timeOfDay = 8;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 8;
  inline float timeofday() const;
  inline void set_timeofday(float value);

  // optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
  inline bool has_rects() const;
  inline void clear_rects();
  static const int kRectsFieldNumber = 9;
  inline const ::com::zhichenhaixin::proto::RadarHistoryRects& rects() const;
  inline ::com::zhichenhaixin::proto::RadarHistoryRects* mutable_rects();
  inline ::com::zhichenhaixin::proto::RadarHistoryRects* release_rects();
  inline void set_allocated_rects(::com::zhichenhaixin::proto::RadarHistoryRects* rects);

  // optional int32 diameter = 10;
  inline bool has_diameter() const;
  inline void clear_diameter();
  static const int kDiameterFieldNumber = 10;
  inline ::google::protobuf::int32 diameter() const;
  inline void set_diameter(::google::protobuf::int32 value);

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
  inline bool has_blocks() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 11;
  inline const ::com::zhichenhaixin::proto::singleVideoBlocks& blocks() const;
  inline ::com::zhichenhaixin::proto::singleVideoBlocks* mutable_blocks();
  inline ::com::zhichenhaixin::proto::singleVideoBlocks* release_blocks();
  inline void set_allocated_blocks(::com::zhichenhaixin::proto::singleVideoBlocks* blocks);

  // optional double startlatitude = 12;
  inline bool has_startlatitude() const;
  inline void clear_startlatitude();
  static const int kStartlatitudeFieldNumber = 12;
  inline double startlatitude() const;
  inline void set_startlatitude(double value);

  // optional double startlongitude = 13;
  inline bool has_startlongitude() const;
  inline void clear_startlongitude();
  static const int kStartlongitudeFieldNumber = 13;
  inline double startlongitude() const;
  inline void set_startlongitude(double value);

  // optional double endlatitude = 14;
  inline bool has_endlatitude() const;
  inline void clear_endlatitude();
  static const int kEndlatitudeFieldNumber = 14;
  inline double endlatitude() const;
  inline void set_endlatitude(double value);

  // optional double endlongitude = 15;
  inline bool has_endlongitude() const;
  inline void clear_endlongitude();
  static const int kEndlongitudeFieldNumber = 15;
  inline double endlongitude() const;
  inline void set_endlongitude(double value);

  // optional double angle = 16;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 16;
  inline double angle() const;
  inline void set_angle(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRect)
 private:
  inline void set_has_rectnumber();
  inline void clear_has_rectnumber();
  inline void set_has_topleftlatitude();
  inline void clear_has_topleftlatitude();
  inline void set_has_topleftlongitude();
  inline void clear_has_topleftlongitude();
  inline void set_has_bottomrightlatitude();
  inline void clear_has_bottomrightlatitude();
  inline void set_has_bottomrightlongitude();
  inline void clear_has_bottomrightlongitude();
  inline void set_has_centerlatitude();
  inline void clear_has_centerlatitude();
  inline void set_has_centerlongitude();
  inline void clear_has_centerlongitude();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_rects();
  inline void clear_has_rects();
  inline void set_has_diameter();
  inline void clear_has_diameter();
  inline void set_has_blocks();
  inline void clear_has_blocks();
  inline void set_has_startlatitude();
  inline void clear_has_startlatitude();
  inline void set_has_startlongitude();
  inline void clear_has_startlongitude();
  inline void set_has_endlatitude();
  inline void clear_has_endlatitude();
  inline void set_has_endlongitude();
  inline void clear_has_endlongitude();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double topleftlatitude_;
  double topleftlongitude_;
  double bottomrightlatitude_;
  ::google::protobuf::uint32 rectnumber_;
  float timeofday_;
  double bottomrightlongitude_;
  double centerlatitude_;
  double centerlongitude_;
  ::com::zhichenhaixin::proto::RadarHistoryRects* rects_;
  ::com::zhichenhaixin::proto::singleVideoBlocks* blocks_;
  double startlatitude_;
  double startlongitude_;
  double endlatitude_;
  double endlongitude_;
  double angle_;
  ::google::protobuf::int32 diameter_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarRect* default_instance_;
};
// -------------------------------------------------------------------

class RadarRects : public ::google::protobuf::Message {
 public:
  RadarRects();
  virtual ~RadarRects();

  RadarRects(const RadarRects& from);

  inline RadarRects& operator=(const RadarRects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRects& default_instance();

  void Swap(RadarRects* other);

  // implements Message ----------------------------------------------

  RadarRects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRects& from);
  void MergeFrom(const RadarRects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 UTC = 1;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 1;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
  inline int radarrects_size() const;
  inline void clear_radarrects();
  static const int kRadarRectsFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RadarRect& radarrects(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRect* mutable_radarrects(int index);
  inline ::com::zhichenhaixin::proto::RadarRect* add_radarrects();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
      radarrects() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
      mutable_radarrects();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRects)
 private:
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect > radarrects_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarRects* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideo : public ::google::protobuf::Message {
 public:
  RadarVideo();
  virtual ~RadarVideo();

  RadarVideo(const RadarVideo& from);

  inline RadarVideo& operator=(const RadarVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideo& default_instance();

  void Swap(RadarVideo* other);

  // implements Message ----------------------------------------------

  RadarVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideo& from);
  void MergeFrom(const RadarVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  inline bool has_radarid() const;
  inline void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  inline ::google::protobuf::uint64 radarid() const;
  inline void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes curImageData = 7;
  inline bool has_curimagedata() const;
  inline void clear_curimagedata();
  static const int kCurImageDataFieldNumber = 7;
  inline const ::std::string& curimagedata() const;
  inline void set_curimagedata(const ::std::string& value);
  inline void set_curimagedata(const char* value);
  inline void set_curimagedata(const void* value, size_t size);
  inline ::std::string* mutable_curimagedata();
  inline ::std::string* release_curimagedata();
  inline void set_allocated_curimagedata(::std::string* curimagedata);

  // required bytes preImageData = 8;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 8;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 9;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 9;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 11;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 11;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 12;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 12;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 13;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 13;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideo)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_curimagedata();
  inline void clear_has_curimagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 radarid_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* curimagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideo* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideoPoint : public ::google::protobuf::Message {
 public:
  RadarVideoPoint();
  virtual ~RadarVideoPoint();

  RadarVideoPoint(const RadarVideoPoint& from);

  inline RadarVideoPoint& operator=(const RadarVideoPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoPoint& default_instance();

  void Swap(RadarVideoPoint* other);

  // implements Message ----------------------------------------------

  RadarVideoPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoPoint& from);
  void MergeFrom(const RadarVideoPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes preImageData = 7;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 7;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 10;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 10;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 11;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 12;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 12;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoPoint)
 private:
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideoPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// singleVideoBlock

// required double latitude = 1;
inline bool singleVideoBlock::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void singleVideoBlock::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void singleVideoBlock::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void singleVideoBlock::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double singleVideoBlock::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.latitude)
  return latitude_;
}
inline void singleVideoBlock::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.latitude)
}

// required double longitude = 2;
inline bool singleVideoBlock::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void singleVideoBlock::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void singleVideoBlock::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void singleVideoBlock::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double singleVideoBlock::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.longitude)
  return longitude_;
}
inline void singleVideoBlock::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.longitude)
}

// -------------------------------------------------------------------

// singleVideoBlocks

// repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
inline int singleVideoBlocks::block_size() const {
  return block_.size();
}
inline void singleVideoBlocks::clear_block() {
  block_.Clear();
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& singleVideoBlocks::block(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlocks.Block)
  return block_.Get(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* singleVideoBlocks::mutable_block(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.singleVideoBlocks.Block)
  return block_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* singleVideoBlocks::add_block() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.singleVideoBlocks.Block)
  return block_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
singleVideoBlocks::block() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.singleVideoBlocks.Block)
  return block_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
singleVideoBlocks::mutable_block() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.singleVideoBlocks.Block)
  return &block_;
}

// -------------------------------------------------------------------

// RadarHistoryRect

// required uint32 rectNumber = 1;
inline bool RadarHistoryRect::has_rectnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarHistoryRect::set_has_rectnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarHistoryRect::clear_has_rectnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarHistoryRect::clear_rectnumber() {
  rectnumber_ = 0u;
  clear_has_rectnumber();
}
inline ::google::protobuf::uint32 RadarHistoryRect::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.rectNumber)
  return rectnumber_;
}
inline void RadarHistoryRect::set_rectnumber(::google::protobuf::uint32 value) {
  set_has_rectnumber();
  rectnumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.rectNumber)
}

// required double topLeftlatitude = 2;
inline bool RadarHistoryRect::has_topleftlatitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarHistoryRect::set_has_topleftlatitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarHistoryRect::clear_has_topleftlatitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarHistoryRect::clear_topleftlatitude() {
  topleftlatitude_ = 0;
  clear_has_topleftlatitude();
}
inline double RadarHistoryRect::topleftlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.topLeftlatitude)
  return topleftlatitude_;
}
inline void RadarHistoryRect::set_topleftlatitude(double value) {
  set_has_topleftlatitude();
  topleftlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.topLeftlatitude)
}

// required double topLeftlongitude = 3;
inline bool RadarHistoryRect::has_topleftlongitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarHistoryRect::set_has_topleftlongitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarHistoryRect::clear_has_topleftlongitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarHistoryRect::clear_topleftlongitude() {
  topleftlongitude_ = 0;
  clear_has_topleftlongitude();
}
inline double RadarHistoryRect::topleftlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.topLeftlongitude)
  return topleftlongitude_;
}
inline void RadarHistoryRect::set_topleftlongitude(double value) {
  set_has_topleftlongitude();
  topleftlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.topLeftlongitude)
}

// required double bottomRightlatitude = 4;
inline bool RadarHistoryRect::has_bottomrightlatitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarHistoryRect::set_has_bottomrightlatitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarHistoryRect::clear_has_bottomrightlatitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarHistoryRect::clear_bottomrightlatitude() {
  bottomrightlatitude_ = 0;
  clear_has_bottomrightlatitude();
}
inline double RadarHistoryRect::bottomrightlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.bottomRightlatitude)
  return bottomrightlatitude_;
}
inline void RadarHistoryRect::set_bottomrightlatitude(double value) {
  set_has_bottomrightlatitude();
  bottomrightlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.bottomRightlatitude)
}

// required double bottomRightlongitude = 5;
inline bool RadarHistoryRect::has_bottomrightlongitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarHistoryRect::set_has_bottomrightlongitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarHistoryRect::clear_has_bottomrightlongitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarHistoryRect::clear_bottomrightlongitude() {
  bottomrightlongitude_ = 0;
  clear_has_bottomrightlongitude();
}
inline double RadarHistoryRect::bottomrightlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.bottomRightlongitude)
  return bottomrightlongitude_;
}
inline void RadarHistoryRect::set_bottomrightlongitude(double value) {
  set_has_bottomrightlongitude();
  bottomrightlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.bottomRightlongitude)
}

// required double centerlatitude = 6;
inline bool RadarHistoryRect::has_centerlatitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarHistoryRect::set_has_centerlatitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarHistoryRect::clear_has_centerlatitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarHistoryRect::clear_centerlatitude() {
  centerlatitude_ = 0;
  clear_has_centerlatitude();
}
inline double RadarHistoryRect::centerlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.centerlatitude)
  return centerlatitude_;
}
inline void RadarHistoryRect::set_centerlatitude(double value) {
  set_has_centerlatitude();
  centerlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.centerlatitude)
}

// required double centerlongitude = 7;
inline bool RadarHistoryRect::has_centerlongitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarHistoryRect::set_has_centerlongitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarHistoryRect::clear_has_centerlongitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarHistoryRect::clear_centerlongitude() {
  centerlongitude_ = 0;
  clear_has_centerlongitude();
}
inline double RadarHistoryRect::centerlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.centerlongitude)
  return centerlongitude_;
}
inline void RadarHistoryRect::set_centerlongitude(double value) {
  set_has_centerlongitude();
  centerlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.centerlongitude)
}

// required float timeOfDay = 8;
inline bool RadarHistoryRect::has_timeofday() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarHistoryRect::set_has_timeofday() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarHistoryRect::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarHistoryRect::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float RadarHistoryRect::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.timeOfDay)
  return timeofday_;
}
inline void RadarHistoryRect::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.timeOfDay)
}

// optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
inline bool RadarHistoryRect::has_blocks() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarHistoryRect::set_has_blocks() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarHistoryRect::clear_has_blocks() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarHistoryRect::clear_blocks() {
  if (blocks_ != NULL) blocks_->::com::zhichenhaixin::proto::singleVideoBlocks::Clear();
  clear_has_blocks();
}
inline const ::com::zhichenhaixin::proto::singleVideoBlocks& RadarHistoryRect::blocks() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.Blocks)
  return blocks_ != NULL ? *blocks_ : *default_instance_->blocks_;
}
inline ::com::zhichenhaixin::proto::singleVideoBlocks* RadarHistoryRect::mutable_blocks() {
  set_has_blocks();
  if (blocks_ == NULL) blocks_ = new ::com::zhichenhaixin::proto::singleVideoBlocks;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarHistoryRect.Blocks)
  return blocks_;
}
inline ::com::zhichenhaixin::proto::singleVideoBlocks* RadarHistoryRect::release_blocks() {
  clear_has_blocks();
  ::com::zhichenhaixin::proto::singleVideoBlocks* temp = blocks_;
  blocks_ = NULL;
  return temp;
}
inline void RadarHistoryRect::set_allocated_blocks(::com::zhichenhaixin::proto::singleVideoBlocks* blocks) {
  delete blocks_;
  blocks_ = blocks;
  if (blocks) {
    set_has_blocks();
  } else {
    clear_has_blocks();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarHistoryRect.Blocks)
}

// optional double startlatitude = 10;
inline bool RadarHistoryRect::has_startlatitude() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarHistoryRect::set_has_startlatitude() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarHistoryRect::clear_has_startlatitude() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarHistoryRect::clear_startlatitude() {
  startlatitude_ = 0;
  clear_has_startlatitude();
}
inline double RadarHistoryRect::startlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.startlatitude)
  return startlatitude_;
}
inline void RadarHistoryRect::set_startlatitude(double value) {
  set_has_startlatitude();
  startlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.startlatitude)
}

// optional double startlongitude = 11;
inline bool RadarHistoryRect::has_startlongitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarHistoryRect::set_has_startlongitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarHistoryRect::clear_has_startlongitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarHistoryRect::clear_startlongitude() {
  startlongitude_ = 0;
  clear_has_startlongitude();
}
inline double RadarHistoryRect::startlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.startlongitude)
  return startlongitude_;
}
inline void RadarHistoryRect::set_startlongitude(double value) {
  set_has_startlongitude();
  startlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.startlongitude)
}

// optional double endlatitude = 12;
inline bool RadarHistoryRect::has_endlatitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarHistoryRect::set_has_endlatitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarHistoryRect::clear_has_endlatitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarHistoryRect::clear_endlatitude() {
  endlatitude_ = 0;
  clear_has_endlatitude();
}
inline double RadarHistoryRect::endlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.endlatitude)
  return endlatitude_;
}
inline void RadarHistoryRect::set_endlatitude(double value) {
  set_has_endlatitude();
  endlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.endlatitude)
}

// optional double endlongitude = 13;
inline bool RadarHistoryRect::has_endlongitude() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarHistoryRect::set_has_endlongitude() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarHistoryRect::clear_has_endlongitude() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarHistoryRect::clear_endlongitude() {
  endlongitude_ = 0;
  clear_has_endlongitude();
}
inline double RadarHistoryRect::endlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.endlongitude)
  return endlongitude_;
}
inline void RadarHistoryRect::set_endlongitude(double value) {
  set_has_endlongitude();
  endlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.endlongitude)
}

// optional double angle = 14;
inline bool RadarHistoryRect::has_angle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RadarHistoryRect::set_has_angle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RadarHistoryRect::clear_has_angle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RadarHistoryRect::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double RadarHistoryRect::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRect.angle)
  return angle_;
}
inline void RadarHistoryRect::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryRect.angle)
}

// -------------------------------------------------------------------

// RadarHistoryRects

// repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
inline int RadarHistoryRects::rects_size() const {
  return rects_.size();
}
inline void RadarHistoryRects::clear_rects() {
  rects_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarHistoryRect& RadarHistoryRects::rects(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryRects.Rects)
  return rects_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarHistoryRect* RadarHistoryRects::mutable_rects(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarHistoryRects.Rects)
  return rects_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarHistoryRect* RadarHistoryRects::add_rects() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarHistoryRects.Rects)
  return rects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryRect >&
RadarHistoryRects::rects() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarHistoryRects.Rects)
  return rects_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryRect >*
RadarHistoryRects::mutable_rects() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarHistoryRects.Rects)
  return &rects_;
}

// -------------------------------------------------------------------

// RadarRect

// required uint32 rectNumber = 1;
inline bool RadarRect::has_rectnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRect::set_has_rectnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRect::clear_has_rectnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRect::clear_rectnumber() {
  rectnumber_ = 0u;
  clear_has_rectnumber();
}
inline ::google::protobuf::uint32 RadarRect::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.rectNumber)
  return rectnumber_;
}
inline void RadarRect::set_rectnumber(::google::protobuf::uint32 value) {
  set_has_rectnumber();
  rectnumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.rectNumber)
}

// required double topLeftlatitude = 2;
inline bool RadarRect::has_topleftlatitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRect::set_has_topleftlatitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRect::clear_has_topleftlatitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRect::clear_topleftlatitude() {
  topleftlatitude_ = 0;
  clear_has_topleftlatitude();
}
inline double RadarRect::topleftlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.topLeftlatitude)
  return topleftlatitude_;
}
inline void RadarRect::set_topleftlatitude(double value) {
  set_has_topleftlatitude();
  topleftlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.topLeftlatitude)
}

// required double topLeftlongitude = 3;
inline bool RadarRect::has_topleftlongitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarRect::set_has_topleftlongitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarRect::clear_has_topleftlongitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarRect::clear_topleftlongitude() {
  topleftlongitude_ = 0;
  clear_has_topleftlongitude();
}
inline double RadarRect::topleftlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.topLeftlongitude)
  return topleftlongitude_;
}
inline void RadarRect::set_topleftlongitude(double value) {
  set_has_topleftlongitude();
  topleftlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.topLeftlongitude)
}

// required double bottomRightlatitude = 4;
inline bool RadarRect::has_bottomrightlatitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarRect::set_has_bottomrightlatitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarRect::clear_has_bottomrightlatitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarRect::clear_bottomrightlatitude() {
  bottomrightlatitude_ = 0;
  clear_has_bottomrightlatitude();
}
inline double RadarRect::bottomrightlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.bottomRightlatitude)
  return bottomrightlatitude_;
}
inline void RadarRect::set_bottomrightlatitude(double value) {
  set_has_bottomrightlatitude();
  bottomrightlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.bottomRightlatitude)
}

// required double bottomRightlongitude = 5;
inline bool RadarRect::has_bottomrightlongitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarRect::set_has_bottomrightlongitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarRect::clear_has_bottomrightlongitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarRect::clear_bottomrightlongitude() {
  bottomrightlongitude_ = 0;
  clear_has_bottomrightlongitude();
}
inline double RadarRect::bottomrightlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.bottomRightlongitude)
  return bottomrightlongitude_;
}
inline void RadarRect::set_bottomrightlongitude(double value) {
  set_has_bottomrightlongitude();
  bottomrightlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.bottomRightlongitude)
}

// required double centerlatitude = 6;
inline bool RadarRect::has_centerlatitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarRect::set_has_centerlatitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarRect::clear_has_centerlatitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarRect::clear_centerlatitude() {
  centerlatitude_ = 0;
  clear_has_centerlatitude();
}
inline double RadarRect::centerlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.centerlatitude)
  return centerlatitude_;
}
inline void RadarRect::set_centerlatitude(double value) {
  set_has_centerlatitude();
  centerlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.centerlatitude)
}

// required double centerlongitude = 7;
inline bool RadarRect::has_centerlongitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarRect::set_has_centerlongitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarRect::clear_has_centerlongitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarRect::clear_centerlongitude() {
  centerlongitude_ = 0;
  clear_has_centerlongitude();
}
inline double RadarRect::centerlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.centerlongitude)
  return centerlongitude_;
}
inline void RadarRect::set_centerlongitude(double value) {
  set_has_centerlongitude();
  centerlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.centerlongitude)
}

// required float timeOfDay = 8;
inline bool RadarRect::has_timeofday() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarRect::set_has_timeofday() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarRect::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarRect::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float RadarRect::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.timeOfDay)
  return timeofday_;
}
inline void RadarRect::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.timeOfDay)
}

// optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
inline bool RadarRect::has_rects() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarRect::set_has_rects() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarRect::clear_has_rects() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarRect::clear_rects() {
  if (rects_ != NULL) rects_->::com::zhichenhaixin::proto::RadarHistoryRects::Clear();
  clear_has_rects();
}
inline const ::com::zhichenhaixin::proto::RadarHistoryRects& RadarRect::rects() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.Rects)
  return rects_ != NULL ? *rects_ : *default_instance_->rects_;
}
inline ::com::zhichenhaixin::proto::RadarHistoryRects* RadarRect::mutable_rects() {
  set_has_rects();
  if (rects_ == NULL) rects_ = new ::com::zhichenhaixin::proto::RadarHistoryRects;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.Rects)
  return rects_;
}
inline ::com::zhichenhaixin::proto::RadarHistoryRects* RadarRect::release_rects() {
  clear_has_rects();
  ::com::zhichenhaixin::proto::RadarHistoryRects* temp = rects_;
  rects_ = NULL;
  return temp;
}
inline void RadarRect::set_allocated_rects(::com::zhichenhaixin::proto::RadarHistoryRects* rects) {
  delete rects_;
  rects_ = rects;
  if (rects) {
    set_has_rects();
  } else {
    clear_has_rects();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.Rects)
}

// optional int32 diameter = 10;
inline bool RadarRect::has_diameter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarRect::set_has_diameter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarRect::clear_has_diameter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarRect::clear_diameter() {
  diameter_ = 0;
  clear_has_diameter();
}
inline ::google::protobuf::int32 RadarRect::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.diameter)
  return diameter_;
}
inline void RadarRect::set_diameter(::google::protobuf::int32 value) {
  set_has_diameter();
  diameter_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.diameter)
}

// optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
inline bool RadarRect::has_blocks() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarRect::set_has_blocks() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarRect::clear_has_blocks() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarRect::clear_blocks() {
  if (blocks_ != NULL) blocks_->::com::zhichenhaixin::proto::singleVideoBlocks::Clear();
  clear_has_blocks();
}
inline const ::com::zhichenhaixin::proto::singleVideoBlocks& RadarRect::blocks() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.Blocks)
  return blocks_ != NULL ? *blocks_ : *default_instance_->blocks_;
}
inline ::com::zhichenhaixin::proto::singleVideoBlocks* RadarRect::mutable_blocks() {
  set_has_blocks();
  if (blocks_ == NULL) blocks_ = new ::com::zhichenhaixin::proto::singleVideoBlocks;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.Blocks)
  return blocks_;
}
inline ::com::zhichenhaixin::proto::singleVideoBlocks* RadarRect::release_blocks() {
  clear_has_blocks();
  ::com::zhichenhaixin::proto::singleVideoBlocks* temp = blocks_;
  blocks_ = NULL;
  return temp;
}
inline void RadarRect::set_allocated_blocks(::com::zhichenhaixin::proto::singleVideoBlocks* blocks) {
  delete blocks_;
  blocks_ = blocks;
  if (blocks) {
    set_has_blocks();
  } else {
    clear_has_blocks();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.Blocks)
}

// optional double startlatitude = 12;
inline bool RadarRect::has_startlatitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarRect::set_has_startlatitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarRect::clear_has_startlatitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarRect::clear_startlatitude() {
  startlatitude_ = 0;
  clear_has_startlatitude();
}
inline double RadarRect::startlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.startlatitude)
  return startlatitude_;
}
inline void RadarRect::set_startlatitude(double value) {
  set_has_startlatitude();
  startlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.startlatitude)
}

// optional double startlongitude = 13;
inline bool RadarRect::has_startlongitude() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarRect::set_has_startlongitude() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarRect::clear_has_startlongitude() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarRect::clear_startlongitude() {
  startlongitude_ = 0;
  clear_has_startlongitude();
}
inline double RadarRect::startlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.startlongitude)
  return startlongitude_;
}
inline void RadarRect::set_startlongitude(double value) {
  set_has_startlongitude();
  startlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.startlongitude)
}

// optional double endlatitude = 14;
inline bool RadarRect::has_endlatitude() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RadarRect::set_has_endlatitude() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RadarRect::clear_has_endlatitude() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RadarRect::clear_endlatitude() {
  endlatitude_ = 0;
  clear_has_endlatitude();
}
inline double RadarRect::endlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.endlatitude)
  return endlatitude_;
}
inline void RadarRect::set_endlatitude(double value) {
  set_has_endlatitude();
  endlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.endlatitude)
}

// optional double endlongitude = 15;
inline bool RadarRect::has_endlongitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RadarRect::set_has_endlongitude() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RadarRect::clear_has_endlongitude() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RadarRect::clear_endlongitude() {
  endlongitude_ = 0;
  clear_has_endlongitude();
}
inline double RadarRect::endlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.endlongitude)
  return endlongitude_;
}
inline void RadarRect::set_endlongitude(double value) {
  set_has_endlongitude();
  endlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.endlongitude)
}

// optional double angle = 16;
inline bool RadarRect::has_angle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RadarRect::set_has_angle() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RadarRect::clear_has_angle() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RadarRect::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double RadarRect::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.angle)
  return angle_;
}
inline void RadarRect::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.angle)
}

// -------------------------------------------------------------------

// RadarRects

// required uint64 UTC = 1;
inline bool RadarRects::has_utc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRects::set_has_utc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRects::clear_has_utc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRects::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarRects::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.UTC)
  return utc_;
}
inline void RadarRects::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.UTC)
}

// required int32 length = 2;
inline bool RadarRects::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRects::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRects::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRects::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarRects::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.length)
  return length_;
}
inline void RadarRects::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.length)
}

// repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
inline int RadarRects::radarrects_size() const {
  return radarrects_.size();
}
inline void RadarRects::clear_radarrects() {
  radarrects_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::radarrects(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.RadarRects)
  return radarrects_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::mutable_radarrects(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRects.RadarRects)
  return radarrects_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::add_radarrects() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRects.RadarRects)
  return radarrects_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
RadarRects::radarrects() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRects.RadarRects)
  return radarrects_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
RadarRects::mutable_radarrects() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRects.RadarRects)
  return &radarrects_;
}

// -------------------------------------------------------------------

// RadarVideo

// required uint64 radarId = 1;
inline bool RadarVideo::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideo::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideo::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideo::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideo::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarId)
  return radarid_;
}
inline void RadarVideo::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarId)
}

// required string radarName = 2;
inline bool RadarVideo::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideo::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideo::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideo::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideo::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarName)
  return *radarname_;
}
inline void RadarVideo::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline ::std::string* RadarVideo::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.radarName)
  return radarname_;
}
inline ::std::string* RadarVideo::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.radarName)
}

// required double latitude = 3;
inline bool RadarVideo::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideo::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideo::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.latitude)
  return latitude_;
}
inline void RadarVideo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.latitude)
}

// required double longitude = 4;
inline bool RadarVideo::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideo::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideo::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.longitude)
  return longitude_;
}
inline void RadarVideo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideo::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideo::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideo::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideo::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.UTC)
  return utc_;
}
inline void RadarVideo::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideo::has_imagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideo::set_has_imagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideo::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideo::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideo::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.imageData)
  return *imagedata_;
}
inline void RadarVideo::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline ::std::string* RadarVideo::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideo::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.imageData)
}

// required bytes curImageData = 7;
inline bool RadarVideo::has_curimagedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideo::set_has_curimagedata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideo::clear_has_curimagedata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideo::clear_curimagedata() {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_->clear();
  }
  clear_has_curimagedata();
}
inline const ::std::string& RadarVideo::curimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return *curimagedata_;
}
inline void RadarVideo::set_curimagedata(const ::std::string& value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const char* value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const void* value, size_t size) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline ::std::string* RadarVideo::mutable_curimagedata() {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return curimagedata_;
}
inline ::std::string* RadarVideo::release_curimagedata() {
  clear_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curimagedata_;
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_curimagedata(::std::string* curimagedata) {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (curimagedata) {
    set_has_curimagedata();
    curimagedata_ = curimagedata;
  } else {
    clear_has_curimagedata();
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.curImageData)
}

// required bytes preImageData = 8;
inline bool RadarVideo::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideo::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideo::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideo::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideo::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return *preimagedata_;
}
inline void RadarVideo::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline ::std::string* RadarVideo::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideo::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.preImageData)
}

// required uint32 width = 9;
inline bool RadarVideo::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideo::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideo::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideo::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.width)
  return width_;
}
inline void RadarVideo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.width)
}

// required uint32 height = 10;
inline bool RadarVideo::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideo::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideo::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideo::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.height)
  return height_;
}
inline void RadarVideo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.height)
}

// required double radius = 11;
inline bool RadarVideo::has_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideo::set_has_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideo::clear_has_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideo::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideo::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radius)
  return radius_;
}
inline void RadarVideo::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radius)
}

// required uint32 curIndex = 12;
inline bool RadarVideo::has_curindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarVideo::set_has_curindex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarVideo::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarVideo::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideo::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curIndex)
  return curindex_;
}
inline void RadarVideo::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curIndex)
}

// required uint32 loopNum = 13;
inline bool RadarVideo::has_loopnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarVideo::set_has_loopnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarVideo::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarVideo::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideo::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.loopNum)
  return loopnum_;
}
inline void RadarVideo::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.loopNum)
}

// -------------------------------------------------------------------

// RadarVideoPoint

// required string radarName = 2;
inline bool RadarVideoPoint::has_radarname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoPoint::set_has_radarname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoPoint::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoPoint::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideoPoint::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return *radarname_;
}
inline void RadarVideoPoint::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline ::std::string* RadarVideoPoint::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return radarname_;
}
inline ::std::string* RadarVideoPoint::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}

// required double latitude = 3;
inline bool RadarVideoPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
  return latitude_;
}
inline void RadarVideoPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
}

// required double longitude = 4;
inline bool RadarVideoPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
  return longitude_;
}
inline void RadarVideoPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideoPoint::has_utc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoPoint::set_has_utc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoPoint::clear_has_utc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoPoint::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideoPoint::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
  return utc_;
}
inline void RadarVideoPoint::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideoPoint::has_imagedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoPoint::set_has_imagedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoPoint::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoPoint::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoPoint::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return *imagedata_;
}
inline void RadarVideoPoint::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline ::std::string* RadarVideoPoint::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideoPoint::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}

// required bytes preImageData = 7;
inline bool RadarVideoPoint::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoPoint::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoPoint::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoPoint::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideoPoint::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return *preimagedata_;
}
inline void RadarVideoPoint::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline ::std::string* RadarVideoPoint::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideoPoint::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}

// required uint32 width = 8;
inline bool RadarVideoPoint::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoPoint::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoPoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoPoint::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoPoint::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.width)
  return width_;
}
inline void RadarVideoPoint::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.width)
}

// required uint32 height = 9;
inline bool RadarVideoPoint::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoPoint::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoPoint::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoPoint::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoPoint::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.height)
  return height_;
}
inline void RadarVideoPoint::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.height)
}

// required double radius = 10;
inline bool RadarVideoPoint::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideoPoint::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideoPoint::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideoPoint::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoPoint::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radius)
  return radius_;
}
inline void RadarVideoPoint::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radius)
}

// required uint32 curIndex = 11;
inline bool RadarVideoPoint::has_curindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideoPoint::set_has_curindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideoPoint::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideoPoint::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideoPoint::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
  return curindex_;
}
inline void RadarVideoPoint::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
}

// required uint32 loopNum = 12;
inline bool RadarVideoPoint::has_loopnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideoPoint::set_has_loopnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideoPoint::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideoPoint::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideoPoint::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
  return loopnum_;
}
inline void RadarVideoPoint::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
