// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadarVideo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* singleVideoBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singleVideoBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* singleVideoBlocks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singleVideoBlocks_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarHistoryRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarHistoryRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarHistoryRects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarHistoryRects_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRects_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadarVideo_2eproto() {
  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadarVideo.proto");
  GOOGLE_CHECK(file != NULL);
  singleVideoBlock_descriptor_ = file->message_type(0);
  static const int singleVideoBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, longitude_),
  };
  singleVideoBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singleVideoBlock_descriptor_,
      singleVideoBlock::default_instance_,
      singleVideoBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singleVideoBlock));
  singleVideoBlocks_descriptor_ = file->message_type(1);
  static const int singleVideoBlocks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlocks, block_),
  };
  singleVideoBlocks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singleVideoBlocks_descriptor_,
      singleVideoBlocks::default_instance_,
      singleVideoBlocks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlocks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlocks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singleVideoBlocks));
  RadarHistoryRect_descriptor_ = file->message_type(2);
  static const int RadarHistoryRect_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, rectnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, topleftlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, topleftlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, bottomrightlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, bottomrightlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, centerlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, centerlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, startlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, startlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, endlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, endlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, angle_),
  };
  RadarHistoryRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarHistoryRect_descriptor_,
      RadarHistoryRect::default_instance_,
      RadarHistoryRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarHistoryRect));
  RadarHistoryRects_descriptor_ = file->message_type(3);
  static const int RadarHistoryRects_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRects, rects_),
  };
  RadarHistoryRects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarHistoryRects_descriptor_,
      RadarHistoryRects::default_instance_,
      RadarHistoryRects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryRects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarHistoryRects));
  RadarRect_descriptor_ = file->message_type(4);
  static const int RadarRect_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, rectnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, topleftlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, topleftlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, bottomrightlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, bottomrightlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, centerlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, centerlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, rects_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, diameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, startlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, startlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, endlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, endlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, angle_),
  };
  RadarRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRect_descriptor_,
      RadarRect::default_instance_,
      RadarRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRect));
  RadarRects_descriptor_ = file->message_type(5);
  static const int RadarRects_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, radarrects_),
  };
  RadarRects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRects_descriptor_,
      RadarRects::default_instance_,
      RadarRects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRects));
  RadarVideo_descriptor_ = file->message_type(6);
  static const int RadarVideo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, loopnum_),
  };
  RadarVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideo_descriptor_,
      RadarVideo::default_instance_,
      RadarVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideo));
  RadarVideoPoint_descriptor_ = file->message_type(7);
  static const int RadarVideoPoint_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, loopnum_),
  };
  RadarVideoPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideoPoint_descriptor_,
      RadarVideoPoint::default_instance_,
      RadarVideoPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideoPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadarVideo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singleVideoBlock_descriptor_, &singleVideoBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singleVideoBlocks_descriptor_, &singleVideoBlocks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarHistoryRect_descriptor_, &RadarHistoryRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarHistoryRects_descriptor_, &RadarHistoryRects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRect_descriptor_, &RadarRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRects_descriptor_, &RadarRects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideo_descriptor_, &RadarVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideoPoint_descriptor_, &RadarVideoPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto() {
  delete singleVideoBlock::default_instance_;
  delete singleVideoBlock_reflection_;
  delete singleVideoBlocks::default_instance_;
  delete singleVideoBlocks_reflection_;
  delete RadarHistoryRect::default_instance_;
  delete RadarHistoryRect_reflection_;
  delete RadarHistoryRects::default_instance_;
  delete RadarHistoryRects_reflection_;
  delete RadarRect::default_instance_;
  delete RadarRect_reflection_;
  delete RadarRects::default_instance_;
  delete RadarRects_reflection_;
  delete RadarVideo::default_instance_;
  delete RadarVideo_reflection_;
  delete RadarVideoPoint::default_instance_;
  delete RadarVideoPoint_reflection_;
}

void protobuf_AddDesc_ZCHXRadarVideo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ZCHXRadarVideo.proto\022\027com.zhichenhaixi"
    "n.proto\"7\n\020singleVideoBlock\022\020\n\010latitude\030"
    "\001 \002(\001\022\021\n\tlongitude\030\002 \002(\001\"M\n\021singleVideoB"
    "locks\0228\n\005Block\030\001 \003(\0132).com.zhichenhaixin"
    ".proto.singleVideoBlock\"\375\002\n\020RadarHistory"
    "Rect\022\022\n\nrectNumber\030\001 \002(\r\022\027\n\017topLeftlatit"
    "ude\030\002 \002(\001\022\030\n\020topLeftlongitude\030\003 \002(\001\022\033\n\023b"
    "ottomRightlatitude\030\004 \002(\001\022\034\n\024bottomRightl"
    "ongitude\030\005 \002(\001\022\026\n\016centerlatitude\030\006 \002(\001\022\027"
    "\n\017centerlongitude\030\007 \002(\001\022\021\n\ttimeOfDay\030\010 \002"
    "(\002\022:\n\006Blocks\030\t \001(\0132*.com.zhichenhaixin.p"
    "roto.singleVideoBlocks\022\025\n\rstartlatitude\030"
    "\n \001(\001\022\026\n\016startlongitude\030\013 \001(\001\022\023\n\013endlati"
    "tude\030\014 \001(\001\022\024\n\014endlongitude\030\r \001(\001\022\r\n\005angl"
    "e\030\016 \001(\001\"M\n\021RadarHistoryRects\0228\n\005Rects\030\001 "
    "\003(\0132).com.zhichenhaixin.proto.RadarHisto"
    "ryRect\"\303\003\n\tRadarRect\022\022\n\nrectNumber\030\001 \002(\r"
    "\022\027\n\017topLeftlatitude\030\002 \002(\001\022\030\n\020topLeftlong"
    "itude\030\003 \002(\001\022\033\n\023bottomRightlatitude\030\004 \002(\001"
    "\022\034\n\024bottomRightlongitude\030\005 \002(\001\022\026\n\016center"
    "latitude\030\006 \002(\001\022\027\n\017centerlongitude\030\007 \002(\001\022"
    "\021\n\ttimeOfDay\030\010 \002(\002\0229\n\005Rects\030\t \001(\0132*.com."
    "zhichenhaixin.proto.RadarHistoryRects\022\020\n"
    "\010diameter\030\n \001(\005\022:\n\006Blocks\030\013 \001(\0132*.com.zh"
    "ichenhaixin.proto.singleVideoBlocks\022\025\n\rs"
    "tartlatitude\030\014 \001(\001\022\026\n\016startlongitude\030\r \001"
    "(\001\022\023\n\013endlatitude\030\016 \001(\001\022\024\n\014endlongitude\030"
    "\017 \001(\001\022\r\n\005angle\030\020 \001(\001\"a\n\nRadarRects\022\013\n\003UT"
    "C\030\001 \002(\004\022\016\n\006length\030\002 \002(\005\0226\n\nRadarRects\030\003 "
    "\003(\0132\".com.zhichenhaixin.proto.RadarRect\""
    "\363\001\n\nRadarVideo\022\017\n\007radarId\030\001 \002(\004\022\021\n\tradar"
    "Name\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongitud"
    "e\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022"
    "\024\n\014curImageData\030\007 \002(\014\022\024\n\014preImageData\030\010 "
    "\002(\014\022\r\n\005width\030\t \002(\r\022\016\n\006height\030\n \002(\r\022\016\n\006ra"
    "dius\030\013 \002(\001\022\020\n\010curIndex\030\014 \002(\r\022\017\n\007loopNum\030"
    "\r \002(\r\"\321\001\n\017RadarVideoPoint\022\021\n\tradarName\030\002"
    " \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongitude\030\004 \002("
    "\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022\024\n\014pre"
    "ImageData\030\007 \002(\014\022\r\n\005width\030\010 \002(\r\022\016\n\006height"
    "\030\t \002(\r\022\016\n\006radius\030\n \002(\001\022\020\n\010curIndex\030\013 \002(\r"
    "\022\017\n\007loopNum\030\014 \002(\r", 1657);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadarVideo.proto", &protobuf_RegisterTypes);
  singleVideoBlock::default_instance_ = new singleVideoBlock();
  singleVideoBlocks::default_instance_ = new singleVideoBlocks();
  RadarHistoryRect::default_instance_ = new RadarHistoryRect();
  RadarHistoryRects::default_instance_ = new RadarHistoryRects();
  RadarRect::default_instance_ = new RadarRect();
  RadarRects::default_instance_ = new RadarRects();
  RadarVideo::default_instance_ = new RadarVideo();
  RadarVideoPoint::default_instance_ = new RadarVideoPoint();
  singleVideoBlock::default_instance_->InitAsDefaultInstance();
  singleVideoBlocks::default_instance_->InitAsDefaultInstance();
  RadarHistoryRect::default_instance_->InitAsDefaultInstance();
  RadarHistoryRects::default_instance_->InitAsDefaultInstance();
  RadarRect::default_instance_->InitAsDefaultInstance();
  RadarRects::default_instance_->InitAsDefaultInstance();
  RadarVideo::default_instance_->InitAsDefaultInstance();
  RadarVideoPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadarVideo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadarVideo_2eproto {
  StaticDescriptorInitializer_ZCHXRadarVideo_2eproto() {
    protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  }
} static_descriptor_initializer_ZCHXRadarVideo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int singleVideoBlock::kLatitudeFieldNumber;
const int singleVideoBlock::kLongitudeFieldNumber;
#endif  // !_MSC_VER

singleVideoBlock::singleVideoBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.singleVideoBlock)
}

void singleVideoBlock::InitAsDefaultInstance() {
}

singleVideoBlock::singleVideoBlock(const singleVideoBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.singleVideoBlock)
}

void singleVideoBlock::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singleVideoBlock::~singleVideoBlock() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.singleVideoBlock)
  SharedDtor();
}

void singleVideoBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singleVideoBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singleVideoBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singleVideoBlock_descriptor_;
}

const singleVideoBlock& singleVideoBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

singleVideoBlock* singleVideoBlock::default_instance_ = NULL;

singleVideoBlock* singleVideoBlock::New() const {
  return new singleVideoBlock;
}

void singleVideoBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<singleVideoBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singleVideoBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.singleVideoBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.singleVideoBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.singleVideoBlock)
  return false;
#undef DO_
}

void singleVideoBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.singleVideoBlock)
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.singleVideoBlock)
}

::google::protobuf::uint8* singleVideoBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.singleVideoBlock)
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.singleVideoBlock)
  return target;
}

int singleVideoBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singleVideoBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singleVideoBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singleVideoBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singleVideoBlock::MergeFrom(const singleVideoBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singleVideoBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singleVideoBlock::CopyFrom(const singleVideoBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singleVideoBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void singleVideoBlock::Swap(singleVideoBlock* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singleVideoBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singleVideoBlock_descriptor_;
  metadata.reflection = singleVideoBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int singleVideoBlocks::kBlockFieldNumber;
#endif  // !_MSC_VER

singleVideoBlocks::singleVideoBlocks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.singleVideoBlocks)
}

void singleVideoBlocks::InitAsDefaultInstance() {
}

singleVideoBlocks::singleVideoBlocks(const singleVideoBlocks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.singleVideoBlocks)
}

void singleVideoBlocks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singleVideoBlocks::~singleVideoBlocks() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.singleVideoBlocks)
  SharedDtor();
}

void singleVideoBlocks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singleVideoBlocks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singleVideoBlocks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singleVideoBlocks_descriptor_;
}

const singleVideoBlocks& singleVideoBlocks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

singleVideoBlocks* singleVideoBlocks::default_instance_ = NULL;

singleVideoBlocks* singleVideoBlocks::New() const {
  return new singleVideoBlocks;
}

void singleVideoBlocks::Clear() {
  block_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singleVideoBlocks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.singleVideoBlocks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
      case 1: {
        if (tag == 10) {
         parse_Block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Block;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.singleVideoBlocks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.singleVideoBlocks)
  return false;
#undef DO_
}

void singleVideoBlocks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.singleVideoBlocks)
  // repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
  for (int i = 0; i < this->block_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->block(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.singleVideoBlocks)
}

::google::protobuf::uint8* singleVideoBlocks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.singleVideoBlocks)
  // repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
  for (int i = 0; i < this->block_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->block(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.singleVideoBlocks)
  return target;
}

int singleVideoBlocks::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Block = 1;
  total_size += 1 * this->block_size();
  for (int i = 0; i < this->block_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singleVideoBlocks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singleVideoBlocks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singleVideoBlocks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singleVideoBlocks::MergeFrom(const singleVideoBlocks& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_.MergeFrom(from.block_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singleVideoBlocks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singleVideoBlocks::CopyFrom(const singleVideoBlocks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singleVideoBlocks::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->block())) return false;
  return true;
}

void singleVideoBlocks::Swap(singleVideoBlocks* other) {
  if (other != this) {
    block_.Swap(&other->block_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singleVideoBlocks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singleVideoBlocks_descriptor_;
  metadata.reflection = singleVideoBlocks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarHistoryRect::kRectNumberFieldNumber;
const int RadarHistoryRect::kTopLeftlatitudeFieldNumber;
const int RadarHistoryRect::kTopLeftlongitudeFieldNumber;
const int RadarHistoryRect::kBottomRightlatitudeFieldNumber;
const int RadarHistoryRect::kBottomRightlongitudeFieldNumber;
const int RadarHistoryRect::kCenterlatitudeFieldNumber;
const int RadarHistoryRect::kCenterlongitudeFieldNumber;
const int RadarHistoryRect::kTimeOfDayFieldNumber;
const int RadarHistoryRect::kBlocksFieldNumber;
const int RadarHistoryRect::kStartlatitudeFieldNumber;
const int RadarHistoryRect::kStartlongitudeFieldNumber;
const int RadarHistoryRect::kEndlatitudeFieldNumber;
const int RadarHistoryRect::kEndlongitudeFieldNumber;
const int RadarHistoryRect::kAngleFieldNumber;
#endif  // !_MSC_VER

RadarHistoryRect::RadarHistoryRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarHistoryRect)
}

void RadarHistoryRect::InitAsDefaultInstance() {
  blocks_ = const_cast< ::com::zhichenhaixin::proto::singleVideoBlocks*>(&::com::zhichenhaixin::proto::singleVideoBlocks::default_instance());
}

RadarHistoryRect::RadarHistoryRect(const RadarHistoryRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryRect)
}

void RadarHistoryRect::SharedCtor() {
  _cached_size_ = 0;
  rectnumber_ = 0u;
  topleftlatitude_ = 0;
  topleftlongitude_ = 0;
  bottomrightlatitude_ = 0;
  bottomrightlongitude_ = 0;
  centerlatitude_ = 0;
  centerlongitude_ = 0;
  timeofday_ = 0;
  blocks_ = NULL;
  startlatitude_ = 0;
  startlongitude_ = 0;
  endlatitude_ = 0;
  endlongitude_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarHistoryRect::~RadarHistoryRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryRect)
  SharedDtor();
}

void RadarHistoryRect::SharedDtor() {
  if (this != default_instance_) {
    delete blocks_;
  }
}

void RadarHistoryRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarHistoryRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarHistoryRect_descriptor_;
}

const RadarHistoryRect& RadarHistoryRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarHistoryRect* RadarHistoryRect::default_instance_ = NULL;

RadarHistoryRect* RadarHistoryRect::New() const {
  return new RadarHistoryRect;
}

void RadarHistoryRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarHistoryRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(topleftlatitude_, centerlongitude_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(startlatitude_, angle_);
    if (has_blocks()) {
      if (blocks_ != NULL) blocks_->::com::zhichenhaixin::proto::singleVideoBlocks::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarHistoryRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarHistoryRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rectNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rectnumber_)));
          set_has_rectnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_topLeftlatitude;
        break;
      }

      // required double topLeftlatitude = 2;
      case 2: {
        if (tag == 17) {
         parse_topLeftlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlatitude_)));
          set_has_topleftlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_topLeftlongitude;
        break;
      }

      // required double topLeftlongitude = 3;
      case 3: {
        if (tag == 25) {
         parse_topLeftlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlongitude_)));
          set_has_topleftlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bottomRightlatitude;
        break;
      }

      // required double bottomRightlatitude = 4;
      case 4: {
        if (tag == 33) {
         parse_bottomRightlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlatitude_)));
          set_has_bottomrightlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bottomRightlongitude;
        break;
      }

      // required double bottomRightlongitude = 5;
      case 5: {
        if (tag == 41) {
         parse_bottomRightlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlongitude_)));
          set_has_bottomrightlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_centerlatitude;
        break;
      }

      // required double centerlatitude = 6;
      case 6: {
        if (tag == 49) {
         parse_centerlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlatitude_)));
          set_has_centerlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_centerlongitude;
        break;
      }

      // required double centerlongitude = 7;
      case 7: {
        if (tag == 57) {
         parse_centerlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlongitude_)));
          set_has_centerlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_timeOfDay;
        break;
      }

      // required float timeOfDay = 8;
      case 8: {
        if (tag == 69) {
         parse_timeOfDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeofday_)));
          set_has_timeofday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Blocks;
        break;
      }

      // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
      case 9: {
        if (tag == 74) {
         parse_Blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_startlatitude;
        break;
      }

      // optional double startlatitude = 10;
      case 10: {
        if (tag == 81) {
         parse_startlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlatitude_)));
          set_has_startlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_startlongitude;
        break;
      }

      // optional double startlongitude = 11;
      case 11: {
        if (tag == 89) {
         parse_startlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlongitude_)));
          set_has_startlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_endlatitude;
        break;
      }

      // optional double endlatitude = 12;
      case 12: {
        if (tag == 97) {
         parse_endlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlatitude_)));
          set_has_endlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_endlongitude;
        break;
      }

      // optional double endlongitude = 13;
      case 13: {
        if (tag == 105) {
         parse_endlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlongitude_)));
          set_has_endlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_angle;
        break;
      }

      // optional double angle = 14;
      case 14: {
        if (tag == 113) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarHistoryRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarHistoryRect)
  return false;
#undef DO_
}

void RadarHistoryRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarHistoryRect)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rectnumber(), output);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topleftlatitude(), output);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->topleftlongitude(), output);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bottomrightlatitude(), output);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bottomrightlongitude(), output);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->centerlatitude(), output);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->centerlongitude(), output);
  }

  // required float timeOfDay = 8;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->timeofday(), output);
  }

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->blocks(), output);
  }

  // optional double startlatitude = 10;
  if (has_startlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->startlatitude(), output);
  }

  // optional double startlongitude = 11;
  if (has_startlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->startlongitude(), output);
  }

  // optional double endlatitude = 12;
  if (has_endlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->endlatitude(), output);
  }

  // optional double endlongitude = 13;
  if (has_endlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->endlongitude(), output);
  }

  // optional double angle = 14;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarHistoryRect)
}

::google::protobuf::uint8* RadarHistoryRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryRect)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rectnumber(), target);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topleftlatitude(), target);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->topleftlongitude(), target);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bottomrightlatitude(), target);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bottomrightlongitude(), target);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->centerlatitude(), target);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->centerlongitude(), target);
  }

  // required float timeOfDay = 8;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->blocks(), target);
  }

  // optional double startlatitude = 10;
  if (has_startlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->startlatitude(), target);
  }

  // optional double startlongitude = 11;
  if (has_startlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->startlongitude(), target);
  }

  // optional double endlatitude = 12;
  if (has_endlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->endlatitude(), target);
  }

  // optional double endlongitude = 13;
  if (has_endlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->endlongitude(), target);
  }

  // optional double angle = 14;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryRect)
  return target;
}

int RadarHistoryRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rectNumber = 1;
    if (has_rectnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rectnumber());
    }

    // required double topLeftlatitude = 2;
    if (has_topleftlatitude()) {
      total_size += 1 + 8;
    }

    // required double topLeftlongitude = 3;
    if (has_topleftlongitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlatitude = 4;
    if (has_bottomrightlatitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlongitude = 5;
    if (has_bottomrightlongitude()) {
      total_size += 1 + 8;
    }

    // required double centerlatitude = 6;
    if (has_centerlatitude()) {
      total_size += 1 + 8;
    }

    // required double centerlongitude = 7;
    if (has_centerlongitude()) {
      total_size += 1 + 8;
    }

    // required float timeOfDay = 8;
    if (has_timeofday()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 9;
    if (has_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks());
    }

    // optional double startlatitude = 10;
    if (has_startlatitude()) {
      total_size += 1 + 8;
    }

    // optional double startlongitude = 11;
    if (has_startlongitude()) {
      total_size += 1 + 8;
    }

    // optional double endlatitude = 12;
    if (has_endlatitude()) {
      total_size += 1 + 8;
    }

    // optional double endlongitude = 13;
    if (has_endlongitude()) {
      total_size += 1 + 8;
    }

    // optional double angle = 14;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarHistoryRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarHistoryRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarHistoryRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarHistoryRect::MergeFrom(const RadarHistoryRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rectnumber()) {
      set_rectnumber(from.rectnumber());
    }
    if (from.has_topleftlatitude()) {
      set_topleftlatitude(from.topleftlatitude());
    }
    if (from.has_topleftlongitude()) {
      set_topleftlongitude(from.topleftlongitude());
    }
    if (from.has_bottomrightlatitude()) {
      set_bottomrightlatitude(from.bottomrightlatitude());
    }
    if (from.has_bottomrightlongitude()) {
      set_bottomrightlongitude(from.bottomrightlongitude());
    }
    if (from.has_centerlatitude()) {
      set_centerlatitude(from.centerlatitude());
    }
    if (from.has_centerlongitude()) {
      set_centerlongitude(from.centerlongitude());
    }
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blocks()) {
      mutable_blocks()->::com::zhichenhaixin::proto::singleVideoBlocks::MergeFrom(from.blocks());
    }
    if (from.has_startlatitude()) {
      set_startlatitude(from.startlatitude());
    }
    if (from.has_startlongitude()) {
      set_startlongitude(from.startlongitude());
    }
    if (from.has_endlatitude()) {
      set_endlatitude(from.endlatitude());
    }
    if (from.has_endlongitude()) {
      set_endlongitude(from.endlongitude());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarHistoryRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryRect::CopyFrom(const RadarHistoryRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_blocks()) {
    if (!this->blocks().IsInitialized()) return false;
  }
  return true;
}

void RadarHistoryRect::Swap(RadarHistoryRect* other) {
  if (other != this) {
    std::swap(rectnumber_, other->rectnumber_);
    std::swap(topleftlatitude_, other->topleftlatitude_);
    std::swap(topleftlongitude_, other->topleftlongitude_);
    std::swap(bottomrightlatitude_, other->bottomrightlatitude_);
    std::swap(bottomrightlongitude_, other->bottomrightlongitude_);
    std::swap(centerlatitude_, other->centerlatitude_);
    std::swap(centerlongitude_, other->centerlongitude_);
    std::swap(timeofday_, other->timeofday_);
    std::swap(blocks_, other->blocks_);
    std::swap(startlatitude_, other->startlatitude_);
    std::swap(startlongitude_, other->startlongitude_);
    std::swap(endlatitude_, other->endlatitude_);
    std::swap(endlongitude_, other->endlongitude_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarHistoryRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarHistoryRect_descriptor_;
  metadata.reflection = RadarHistoryRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarHistoryRects::kRectsFieldNumber;
#endif  // !_MSC_VER

RadarHistoryRects::RadarHistoryRects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarHistoryRects)
}

void RadarHistoryRects::InitAsDefaultInstance() {
}

RadarHistoryRects::RadarHistoryRects(const RadarHistoryRects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryRects)
}

void RadarHistoryRects::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarHistoryRects::~RadarHistoryRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryRects)
  SharedDtor();
}

void RadarHistoryRects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarHistoryRects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarHistoryRects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarHistoryRects_descriptor_;
}

const RadarHistoryRects& RadarHistoryRects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarHistoryRects* RadarHistoryRects::default_instance_ = NULL;

RadarHistoryRects* RadarHistoryRects::New() const {
  return new RadarHistoryRects;
}

void RadarHistoryRects::Clear() {
  rects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarHistoryRects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarHistoryRects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
      case 1: {
        if (tag == 10) {
         parse_Rects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Rects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarHistoryRects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarHistoryRects)
  return false;
#undef DO_
}

void RadarHistoryRects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarHistoryRects)
  // repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
  for (int i = 0; i < this->rects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarHistoryRects)
}

::google::protobuf::uint8* RadarHistoryRects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryRects)
  // repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
  for (int i = 0; i < this->rects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryRects)
  return target;
}

int RadarHistoryRects::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RadarHistoryRect Rects = 1;
  total_size += 1 * this->rects_size();
  for (int i = 0; i < this->rects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarHistoryRects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarHistoryRects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarHistoryRects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarHistoryRects::MergeFrom(const RadarHistoryRects& from) {
  GOOGLE_CHECK_NE(&from, this);
  rects_.MergeFrom(from.rects_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarHistoryRects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryRects::CopyFrom(const RadarHistoryRects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryRects::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->rects())) return false;
  return true;
}

void RadarHistoryRects::Swap(RadarHistoryRects* other) {
  if (other != this) {
    rects_.Swap(&other->rects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarHistoryRects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarHistoryRects_descriptor_;
  metadata.reflection = RadarHistoryRects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRect::kRectNumberFieldNumber;
const int RadarRect::kTopLeftlatitudeFieldNumber;
const int RadarRect::kTopLeftlongitudeFieldNumber;
const int RadarRect::kBottomRightlatitudeFieldNumber;
const int RadarRect::kBottomRightlongitudeFieldNumber;
const int RadarRect::kCenterlatitudeFieldNumber;
const int RadarRect::kCenterlongitudeFieldNumber;
const int RadarRect::kTimeOfDayFieldNumber;
const int RadarRect::kRectsFieldNumber;
const int RadarRect::kDiameterFieldNumber;
const int RadarRect::kBlocksFieldNumber;
const int RadarRect::kStartlatitudeFieldNumber;
const int RadarRect::kStartlongitudeFieldNumber;
const int RadarRect::kEndlatitudeFieldNumber;
const int RadarRect::kEndlongitudeFieldNumber;
const int RadarRect::kAngleFieldNumber;
#endif  // !_MSC_VER

RadarRect::RadarRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::InitAsDefaultInstance() {
  rects_ = const_cast< ::com::zhichenhaixin::proto::RadarHistoryRects*>(&::com::zhichenhaixin::proto::RadarHistoryRects::default_instance());
  blocks_ = const_cast< ::com::zhichenhaixin::proto::singleVideoBlocks*>(&::com::zhichenhaixin::proto::singleVideoBlocks::default_instance());
}

RadarRect::RadarRect(const RadarRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::SharedCtor() {
  _cached_size_ = 0;
  rectnumber_ = 0u;
  topleftlatitude_ = 0;
  topleftlongitude_ = 0;
  bottomrightlatitude_ = 0;
  bottomrightlongitude_ = 0;
  centerlatitude_ = 0;
  centerlongitude_ = 0;
  timeofday_ = 0;
  rects_ = NULL;
  diameter_ = 0;
  blocks_ = NULL;
  startlatitude_ = 0;
  startlongitude_ = 0;
  endlatitude_ = 0;
  endlongitude_ = 0;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRect::~RadarRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRect)
  SharedDtor();
}

void RadarRect::SharedDtor() {
  if (this != default_instance_) {
    delete rects_;
    delete blocks_;
  }
}

void RadarRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRect_descriptor_;
}

const RadarRect& RadarRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarRect* RadarRect::default_instance_ = NULL;

RadarRect* RadarRect::New() const {
  return new RadarRect;
}

void RadarRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(topleftlatitude_, centerlongitude_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(startlatitude_, diameter_);
    if (has_rects()) {
      if (rects_ != NULL) rects_->::com::zhichenhaixin::proto::RadarHistoryRects::Clear();
    }
    if (has_blocks()) {
      if (blocks_ != NULL) blocks_->::com::zhichenhaixin::proto::singleVideoBlocks::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rectNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rectnumber_)));
          set_has_rectnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_topLeftlatitude;
        break;
      }

      // required double topLeftlatitude = 2;
      case 2: {
        if (tag == 17) {
         parse_topLeftlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlatitude_)));
          set_has_topleftlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_topLeftlongitude;
        break;
      }

      // required double topLeftlongitude = 3;
      case 3: {
        if (tag == 25) {
         parse_topLeftlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlongitude_)));
          set_has_topleftlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bottomRightlatitude;
        break;
      }

      // required double bottomRightlatitude = 4;
      case 4: {
        if (tag == 33) {
         parse_bottomRightlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlatitude_)));
          set_has_bottomrightlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bottomRightlongitude;
        break;
      }

      // required double bottomRightlongitude = 5;
      case 5: {
        if (tag == 41) {
         parse_bottomRightlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlongitude_)));
          set_has_bottomrightlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_centerlatitude;
        break;
      }

      // required double centerlatitude = 6;
      case 6: {
        if (tag == 49) {
         parse_centerlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlatitude_)));
          set_has_centerlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_centerlongitude;
        break;
      }

      // required double centerlongitude = 7;
      case 7: {
        if (tag == 57) {
         parse_centerlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlongitude_)));
          set_has_centerlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_timeOfDay;
        break;
      }

      // required float timeOfDay = 8;
      case 8: {
        if (tag == 69) {
         parse_timeOfDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeofday_)));
          set_has_timeofday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_Rects;
        break;
      }

      // optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
      case 9: {
        if (tag == 74) {
         parse_Rects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_diameter;
        break;
      }

      // optional int32 diameter = 10;
      case 10: {
        if (tag == 80) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_Blocks;
        break;
      }

      // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
      case 11: {
        if (tag == 90) {
         parse_Blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_startlatitude;
        break;
      }

      // optional double startlatitude = 12;
      case 12: {
        if (tag == 97) {
         parse_startlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlatitude_)));
          set_has_startlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_startlongitude;
        break;
      }

      // optional double startlongitude = 13;
      case 13: {
        if (tag == 105) {
         parse_startlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlongitude_)));
          set_has_startlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_endlatitude;
        break;
      }

      // optional double endlatitude = 14;
      case 14: {
        if (tag == 113) {
         parse_endlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlatitude_)));
          set_has_endlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_endlongitude;
        break;
      }

      // optional double endlongitude = 15;
      case 15: {
        if (tag == 121) {
         parse_endlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlongitude_)));
          set_has_endlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_angle;
        break;
      }

      // optional double angle = 16;
      case 16: {
        if (tag == 129) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRect)
  return false;
#undef DO_
}

void RadarRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRect)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rectnumber(), output);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topleftlatitude(), output);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->topleftlongitude(), output);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bottomrightlatitude(), output);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bottomrightlongitude(), output);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->centerlatitude(), output);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->centerlongitude(), output);
  }

  // required float timeOfDay = 8;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->timeofday(), output);
  }

  // optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
  if (has_rects()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rects(), output);
  }

  // optional int32 diameter = 10;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->diameter(), output);
  }

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
  if (has_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->blocks(), output);
  }

  // optional double startlatitude = 12;
  if (has_startlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->startlatitude(), output);
  }

  // optional double startlongitude = 13;
  if (has_startlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->startlongitude(), output);
  }

  // optional double endlatitude = 14;
  if (has_endlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->endlatitude(), output);
  }

  // optional double endlongitude = 15;
  if (has_endlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->endlongitude(), output);
  }

  // optional double angle = 16;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRect)
}

::google::protobuf::uint8* RadarRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRect)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rectnumber(), target);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topleftlatitude(), target);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->topleftlongitude(), target);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bottomrightlatitude(), target);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bottomrightlongitude(), target);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->centerlatitude(), target);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->centerlongitude(), target);
  }

  // required float timeOfDay = 8;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
  if (has_rects()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rects(), target);
  }

  // optional int32 diameter = 10;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->diameter(), target);
  }

  // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
  if (has_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->blocks(), target);
  }

  // optional double startlatitude = 12;
  if (has_startlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->startlatitude(), target);
  }

  // optional double startlongitude = 13;
  if (has_startlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->startlongitude(), target);
  }

  // optional double endlatitude = 14;
  if (has_endlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->endlatitude(), target);
  }

  // optional double endlongitude = 15;
  if (has_endlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->endlongitude(), target);
  }

  // optional double angle = 16;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRect)
  return target;
}

int RadarRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rectNumber = 1;
    if (has_rectnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rectnumber());
    }

    // required double topLeftlatitude = 2;
    if (has_topleftlatitude()) {
      total_size += 1 + 8;
    }

    // required double topLeftlongitude = 3;
    if (has_topleftlongitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlatitude = 4;
    if (has_bottomrightlatitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlongitude = 5;
    if (has_bottomrightlongitude()) {
      total_size += 1 + 8;
    }

    // required double centerlatitude = 6;
    if (has_centerlatitude()) {
      total_size += 1 + 8;
    }

    // required double centerlongitude = 7;
    if (has_centerlongitude()) {
      total_size += 1 + 8;
    }

    // required float timeOfDay = 8;
    if (has_timeofday()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.zhichenhaixin.proto.RadarHistoryRects Rects = 9;
    if (has_rects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rects());
    }

    // optional int32 diameter = 10;
    if (has_diameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diameter());
    }

    // optional .com.zhichenhaixin.proto.singleVideoBlocks Blocks = 11;
    if (has_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocks());
    }

    // optional double startlatitude = 12;
    if (has_startlatitude()) {
      total_size += 1 + 8;
    }

    // optional double startlongitude = 13;
    if (has_startlongitude()) {
      total_size += 1 + 8;
    }

    // optional double endlatitude = 14;
    if (has_endlatitude()) {
      total_size += 1 + 8;
    }

    // optional double endlongitude = 15;
    if (has_endlongitude()) {
      total_size += 1 + 8;
    }

    // optional double angle = 16;
    if (has_angle()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRect::MergeFrom(const RadarRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rectnumber()) {
      set_rectnumber(from.rectnumber());
    }
    if (from.has_topleftlatitude()) {
      set_topleftlatitude(from.topleftlatitude());
    }
    if (from.has_topleftlongitude()) {
      set_topleftlongitude(from.topleftlongitude());
    }
    if (from.has_bottomrightlatitude()) {
      set_bottomrightlatitude(from.bottomrightlatitude());
    }
    if (from.has_bottomrightlongitude()) {
      set_bottomrightlongitude(from.bottomrightlongitude());
    }
    if (from.has_centerlatitude()) {
      set_centerlatitude(from.centerlatitude());
    }
    if (from.has_centerlongitude()) {
      set_centerlongitude(from.centerlongitude());
    }
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rects()) {
      mutable_rects()->::com::zhichenhaixin::proto::RadarHistoryRects::MergeFrom(from.rects());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
    if (from.has_blocks()) {
      mutable_blocks()->::com::zhichenhaixin::proto::singleVideoBlocks::MergeFrom(from.blocks());
    }
    if (from.has_startlatitude()) {
      set_startlatitude(from.startlatitude());
    }
    if (from.has_startlongitude()) {
      set_startlongitude(from.startlongitude());
    }
    if (from.has_endlatitude()) {
      set_endlatitude(from.endlatitude());
    }
    if (from.has_endlongitude()) {
      set_endlongitude(from.endlongitude());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRect::CopyFrom(const RadarRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_rects()) {
    if (!this->rects().IsInitialized()) return false;
  }
  if (has_blocks()) {
    if (!this->blocks().IsInitialized()) return false;
  }
  return true;
}

void RadarRect::Swap(RadarRect* other) {
  if (other != this) {
    std::swap(rectnumber_, other->rectnumber_);
    std::swap(topleftlatitude_, other->topleftlatitude_);
    std::swap(topleftlongitude_, other->topleftlongitude_);
    std::swap(bottomrightlatitude_, other->bottomrightlatitude_);
    std::swap(bottomrightlongitude_, other->bottomrightlongitude_);
    std::swap(centerlatitude_, other->centerlatitude_);
    std::swap(centerlongitude_, other->centerlongitude_);
    std::swap(timeofday_, other->timeofday_);
    std::swap(rects_, other->rects_);
    std::swap(diameter_, other->diameter_);
    std::swap(blocks_, other->blocks_);
    std::swap(startlatitude_, other->startlatitude_);
    std::swap(startlongitude_, other->startlongitude_);
    std::swap(endlatitude_, other->endlatitude_);
    std::swap(endlongitude_, other->endlongitude_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRect_descriptor_;
  metadata.reflection = RadarRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRects::kUTCFieldNumber;
const int RadarRects::kLengthFieldNumber;
const int RadarRects::kRadarRectsFieldNumber;
#endif  // !_MSC_VER

RadarRects::RadarRects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::InitAsDefaultInstance() {
}

RadarRects::RadarRects(const RadarRects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRects::~RadarRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRects)
  SharedDtor();
}

void RadarRects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarRects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRects_descriptor_;
}

const RadarRects& RadarRects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarRects* RadarRects::default_instance_ = NULL;

RadarRects* RadarRects::New() const {
  return new RadarRects;
}

void RadarRects::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    utc_ = GOOGLE_ULONGLONG(0);
    length_ = 0;
  }
  radarrects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 UTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RadarRects;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
      case 3: {
        if (tag == 26) {
         parse_RadarRects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_radarrects()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RadarRects;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRects)
  return false;
#undef DO_
}

void RadarRects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
  for (int i = 0; i < this->radarrects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->radarrects(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRects)
}

::google::protobuf::uint8* RadarRects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // required int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
  for (int i = 0; i < this->radarrects_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->radarrects(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRects)
  return target;
}

int RadarRects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 UTC = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRect RadarRects = 3;
  total_size += 1 * this->radarrects_size();
  for (int i = 0; i < this->radarrects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->radarrects(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRects::MergeFrom(const RadarRects& from) {
  GOOGLE_CHECK_NE(&from, this);
  radarrects_.MergeFrom(from.radarrects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRects::CopyFrom(const RadarRects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRects::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->radarrects())) return false;
  return true;
}

void RadarRects::Swap(RadarRects* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    std::swap(length_, other->length_);
    radarrects_.Swap(&other->radarrects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRects_descriptor_;
  metadata.reflection = RadarRects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideo::kRadarIdFieldNumber;
const int RadarVideo::kRadarNameFieldNumber;
const int RadarVideo::kLatitudeFieldNumber;
const int RadarVideo::kLongitudeFieldNumber;
const int RadarVideo::kUTCFieldNumber;
const int RadarVideo::kImageDataFieldNumber;
const int RadarVideo::kCurImageDataFieldNumber;
const int RadarVideo::kPreImageDataFieldNumber;
const int RadarVideo::kWidthFieldNumber;
const int RadarVideo::kHeightFieldNumber;
const int RadarVideo::kRadiusFieldNumber;
const int RadarVideo::kCurIndexFieldNumber;
const int RadarVideo::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideo::RadarVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::InitAsDefaultInstance() {
}

RadarVideo::RadarVideo(const RadarVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarid_ = GOOGLE_ULONGLONG(0);
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideo::~RadarVideo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideo)
  SharedDtor();
}

void RadarVideo::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideo_descriptor_;
}

const RadarVideo& RadarVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideo* RadarVideo::default_instance_ = NULL;

RadarVideo* RadarVideo::New() const {
  return new RadarVideo;
}

void RadarVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    radarid_ = GOOGLE_ULONGLONG(0);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_curimagedata()) {
      if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curimagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(width_, loopnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
          set_has_radarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_curImageData;
        break;
      }

      // required bytes curImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_curImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_curimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 8;
      case 8: {
        if (tag == 66) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // required uint32 width = 9;
      case 9: {
        if (tag == 72) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // required uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_radius;
        break;
      }

      // required double radius = 11;
      case 11: {
        if (tag == 89) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 12;
      case 12: {
        if (tag == 96) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 13;
      case 13: {
        if (tag == 104) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideo)
  return false;
#undef DO_
}

void RadarVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->curimagedata(), output);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->preimagedata(), output);
  }

  // required uint32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->width(), output);
  }

  // required uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // required double radius = 11;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->radius(), output);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->curindex(), output);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideo)
}

::google::protobuf::uint8* RadarVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->curimagedata(), target);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->preimagedata(), target);
  }

  // required uint32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->width(), target);
  }

  // required uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // required double radius = 11;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->radius(), target);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->curindex(), target);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideo)
  return target;
}

int RadarVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 radarId = 1;
    if (has_radarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radarid());
    }

    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes curImageData = 7;
    if (has_curimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->curimagedata());
    }

    // required bytes preImageData = 8;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required double radius = 11;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 12;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 13;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideo::MergeFrom(const RadarVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_curimagedata()) {
      set_curimagedata(from.curimagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideo::CopyFrom(const RadarVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void RadarVideo::Swap(RadarVideo* other) {
  if (other != this) {
    std::swap(radarid_, other->radarid_);
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(curimagedata_, other->curimagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideo_descriptor_;
  metadata.reflection = RadarVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideoPoint::kRadarNameFieldNumber;
const int RadarVideoPoint::kLatitudeFieldNumber;
const int RadarVideoPoint::kLongitudeFieldNumber;
const int RadarVideoPoint::kUTCFieldNumber;
const int RadarVideoPoint::kImageDataFieldNumber;
const int RadarVideoPoint::kPreImageDataFieldNumber;
const int RadarVideoPoint::kWidthFieldNumber;
const int RadarVideoPoint::kHeightFieldNumber;
const int RadarVideoPoint::kRadiusFieldNumber;
const int RadarVideoPoint::kCurIndexFieldNumber;
const int RadarVideoPoint::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideoPoint::RadarVideoPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::InitAsDefaultInstance() {
}

RadarVideoPoint::RadarVideoPoint(const RadarVideoPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideoPoint::~RadarVideoPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoPoint)
  SharedDtor();
}

void RadarVideoPoint::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoPoint_descriptor_;
}

const RadarVideoPoint& RadarVideoPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideoPoint* RadarVideoPoint::default_instance_ = NULL;

RadarVideoPoint* RadarVideoPoint::New() const {
  return new RadarVideoPoint;
}

void RadarVideoPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideoPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    ZR_(width_, height_);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  ZR_(radius_, loopnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideoPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // required uint32 width = 8;
      case 8: {
        if (tag == 64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // required uint32 height = 9;
      case 9: {
        if (tag == 72) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_radius;
        break;
      }

      // required double radius = 10;
      case 10: {
        if (tag == 81) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 11;
      case 11: {
        if (tag == 88) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 12;
      case 12: {
        if (tag == 96) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideoPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideoPoint)
  return false;
#undef DO_
}

void RadarVideoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->preimagedata(), output);
  }

  // required uint32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->width(), output);
  }

  // required uint32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->height(), output);
  }

  // required double radius = 10;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->radius(), output);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curindex(), output);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideoPoint)
}

::google::protobuf::uint8* RadarVideoPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->preimagedata(), target);
  }

  // required uint32 width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->width(), target);
  }

  // required uint32 height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->height(), target);
  }

  // required double radius = 10;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->radius(), target);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curindex(), target);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoPoint)
  return target;
}

int RadarVideoPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes preImageData = 7;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

    // required uint32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double radius = 10;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 11;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 12;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideoPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideoPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideoPoint::MergeFrom(const RadarVideoPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideoPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoPoint::CopyFrom(const RadarVideoPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void RadarVideoPoint::Swap(RadarVideoPoint* other) {
  if (other != this) {
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideoPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoPoint_descriptor_;
  metadata.reflection = RadarVideoPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
