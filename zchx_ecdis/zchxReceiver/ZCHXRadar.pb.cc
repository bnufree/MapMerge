// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RadarHistoryTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarHistoryTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarHistoryTracks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarHistoryTracks_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSurfaceTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSurfaceTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFrame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CNF_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STH_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadar_2eproto() {
  protobuf_AddDesc_ZCHXRadar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadar.proto");
  GOOGLE_CHECK(file != NULL);
  RadarHistoryTrack_descriptor_ = file->message_type(0);
  static const int RadarHistoryTrack_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, tracknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, wgs84poslat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, wgs84poslong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, extrapolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, trackpositioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, utc_),
  };
  RadarHistoryTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarHistoryTrack_descriptor_,
      RadarHistoryTrack::default_instance_,
      RadarHistoryTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarHistoryTrack));
  RadarHistoryTracks_descriptor_ = file->message_type(1);
  static const int RadarHistoryTracks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTracks, track_),
  };
  RadarHistoryTracks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarHistoryTracks_descriptor_,
      RadarHistoryTracks::default_instance_,
      RadarHistoryTracks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTracks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarHistoryTracks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarHistoryTracks));
  TrackPoint_descriptor_ = file->message_type(2);
  static const int TrackPoint_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, systemareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, systemidentificationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesianposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesianposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, wgs84poslat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, wgs84poslong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracklastreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, extrapolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, trackpositioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmaxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, ampofpriplot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesiantrkvel_vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesiantrkvel_vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, fleetnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, lontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, lattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, aisid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, diameter_),
  };
  TrackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackPoint_descriptor_,
      TrackPoint::default_instance_,
      TrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackPoint));
  RadarSurfaceTrack_descriptor_ = file->message_type(3);
  static const int RadarSurfaceTrack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, trackpoints_),
  };
  RadarSurfaceTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarSurfaceTrack_descriptor_,
      RadarSurfaceTrack::default_instance_,
      RadarSurfaceTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarSurfaceTrack));
  VideoFrame_descriptor_ = file->message_type(4);
  static const int VideoFrame_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, systemareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, systemidentificationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, msgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, startrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, rangefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, bitresolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, amplitude_),
  };
  VideoFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoFrame_descriptor_,
      VideoFrame::default_instance_,
      VideoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoFrame));
  MSGTYP_descriptor_ = file->enum_type(0);
  CNF_descriptor_ = file->enum_type(1);
  CST_descriptor_ = file->enum_type(2);
  STH_descriptor_ = file->enum_type(3);
  RES_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarHistoryTrack_descriptor_, &RadarHistoryTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarHistoryTracks_descriptor_, &RadarHistoryTracks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackPoint_descriptor_, &TrackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarSurfaceTrack_descriptor_, &RadarSurfaceTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoFrame_descriptor_, &VideoFrame::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadar_2eproto() {
  delete RadarHistoryTrack::default_instance_;
  delete RadarHistoryTrack_reflection_;
  delete RadarHistoryTracks::default_instance_;
  delete RadarHistoryTracks_reflection_;
  delete TrackPoint::default_instance_;
  delete TrackPoint_reflection_;
  delete RadarSurfaceTrack::default_instance_;
  delete RadarSurfaceTrack_reflection_;
  delete VideoFrame::default_instance_;
  delete VideoFrame_reflection_;
}

void protobuf_AddDesc_ZCHXRadar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ZCHXRadar.proto\022\027com.zhichenhaixin.pro"
    "to\"\254\002\n\021RadarHistoryTrack\022\023\n\013trackNumber\030"
    "\001 \002(\003\022\023\n\013wgs84PosLat\030\002 \002(\001\022\024\n\014wgs84PosLo"
    "ng\030\003 \002(\001\022\021\n\ttimeOfDay\030\004 \002(\002\022/\n\ttrackType"
    "\030\005 \001(\0162\034.com.zhichenhaixin.proto.CNF\0223\n\r"
    "extrapolation\030\007 \001(\0162\034.com.zhichenhaixin."
    "proto.CST\0227\n\021trackPositionCode\030\010 \001(\0162\034.c"
    "om.zhichenhaixin.proto.STH\022\013\n\003cog\030\t \002(\001\022"
    "\013\n\003sog\030\n \002(\001\022\013\n\003UTC\030\013 \002(\004\"O\n\022RadarHistor"
    "yTracks\0229\n\005track\030\001 \003(\0132*.com.zhichenhaix"
    "in.proto.RadarHistoryTrack\"\201\006\n\nTrackPoin"
    "t\022\026\n\016systemAreaCode\030\001 \002(\005\022 \n\030systemIdent"
    "ificationCode\030\002 \002(\005\0224\n\013messageType\030\003 \002(\016"
    "2\037.com.zhichenhaixin.proto.MSGTYP\022\023\n\013tra"
    "ckNumber\030\004 \002(\r\022\025\n\rcartesianPosX\030\005 \002(\002\022\025\n"
    "\rcartesianPosY\030\006 \002(\002\022\023\n\013wgs84PosLat\030\007 \002("
    "\001\022\024\n\014wgs84PosLong\030\010 \002(\001\022\021\n\ttimeOfDay\030\t \002"
    "(\002\022/\n\ttrackType\030\n \001(\0162\034.com.zhichenhaixi"
    "n.proto.CNF\022\027\n\017trackLastReport\030\013 \001(\010\0223\n\r"
    "extrapolation\030\014 \001(\0162\034.com.zhichenhaixin."
    "proto.CST\0227\n\021trackPositionCode\030\r \001(\0162\034.c"
    "om.zhichenhaixin.proto.STH\022\016\n\006sigmaX\030\016 \001"
    "(\002\022\016\n\006sigmaY\030\017 \001(\002\022\017\n\007sigmaXY\030\020 \001(\002\022\024\n\014a"
    "mpOfPriPlot\030\021 \001(\002\022\032\n\022cartesianTrkVel_vx\030"
    "\022 \002(\001\022\032\n\022cartesianTrkVel_vy\030\023 \002(\001\022\013\n\003cog"
    "\030\024 \002(\001\022\013\n\003sog\030\025 \002(\001\022\023\n\013fleetNumber\030\026 \001(\005"
    "\022\016\n\006status\030\027 \001(\005\022\017\n\007lonType\030\030 \001(\t\022\017\n\007lat"
    "Type\030\031 \001(\t\022\014\n\004type\030\032 \001(\005\022\r\n\005aisid\030\033 \001(\t\022"
    ";\n\006tracks\030\034 \001(\0132+.com.zhichenhaixin.prot"
    "o.RadarHistoryTracks\022\020\n\010diameter\030\035 \001(\005\"\212"
    "\001\n\021RadarSurfaceTrack\022\014\n\004flag\030\001 \002(\005\022\020\n\010so"
    "urceId\030\002 \002(\t\022\013\n\003UTC\030\003 \002(\004\022\016\n\006length\030\004 \002("
    "\005\0228\n\013trackPoints\030\005 \003(\0132#.com.zhichenhaix"
    "in.proto.TrackPoint\"\376\001\n\nVideoFrame\022\026\n\016sy"
    "stemAreaCode\030\001 \002(\005\022 \n\030systemIdentificati"
    "onCode\030\002 \002(\005\022\020\n\010msgIndex\030\003 \002(\005\022\017\n\007azimut"
    "h\030\004 \002(\r\022\017\n\007heading\030\005 \001(\r\022\022\n\nstartRange\030\006"
    " \002(\001\022\023\n\013rangeFactor\030\007 \002(\001\0223\n\rbitResoluti"
    "on\030\010 \002(\0162\034.com.zhichenhaixin.proto.RES\022\021"
    "\n\ttimeOfDay\030\t \002(\005\022\021\n\tamplitude\030\n \003(\005*}\n\006"
    "MSGTYP\022\024\n\020MSGTYP_UNDEFINED\020\000\022\021\n\rTARGET_R"
    "EPORT\020\001\022\031\n\025START_OF_UPDATE_CYCLE\020\002\022\023\n\017PE"
    "RIODIC_STATUS\020\003\022\032\n\026EVENT_TRIGGERED_STATU"
    "S\020\004*B\n\003CNF\022\023\n\017CONFIRMED_TRACK\020\000\022\023\n\017TENTA"
    "TIVE_TRACK\020\001\022\021\n\rUNKNOWN_TRACK\020\002*\230\001\n\003CST\022"
    "\021\n\rCST_UNDEFINED\020\000\022(\n$PREDICTABLE_EXTRAP"
    "OLATION_DUE_PERIOD\020\001\022%\n!PREDICTABLE_EXTR"
    "APOLATION_IN_AREA\020\002\022-\n)EXTRAPOLATION_DUE"
    "_UNPREDICTABLE_DETECTION\020\003*3\n\003STH\022\025\n\021MEA"
    "SURED_POSITION\020\000\022\025\n\021SMOOTHED_POSITION\020\001*"
    "\222\001\n\003RES\022\026\n\022MONOBIT_RESOLUTION\020\001\022\022\n\016LOW_R"
    "ESOLUTION\020\002\022\025\n\021MEDIUM_RESOLUTION\020\003\022\023\n\017HI"
    "GH_RESOLUTION\020\004\022\030\n\024VERY_HIGH_RESOLUTION\020"
    "\005\022\031\n\025ULTRA_HIGH_RESOLUTION\020\006", 2148);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadar.proto", &protobuf_RegisterTypes);
  RadarHistoryTrack::default_instance_ = new RadarHistoryTrack();
  RadarHistoryTracks::default_instance_ = new RadarHistoryTracks();
  TrackPoint::default_instance_ = new TrackPoint();
  RadarSurfaceTrack::default_instance_ = new RadarSurfaceTrack();
  VideoFrame::default_instance_ = new VideoFrame();
  RadarHistoryTrack::default_instance_->InitAsDefaultInstance();
  RadarHistoryTracks::default_instance_->InitAsDefaultInstance();
  TrackPoint::default_instance_->InitAsDefaultInstance();
  RadarSurfaceTrack::default_instance_->InitAsDefaultInstance();
  VideoFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadar_2eproto {
  StaticDescriptorInitializer_ZCHXRadar_2eproto() {
    protobuf_AddDesc_ZCHXRadar_2eproto();
  }
} static_descriptor_initializer_ZCHXRadar_2eproto_;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSGTYP_descriptor_;
}
bool MSGTYP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CNF_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNF_descriptor_;
}
bool CNF_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CST_descriptor_;
}
bool CST_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STH_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STH_descriptor_;
}
bool STH_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RES_descriptor_;
}
bool RES_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RadarHistoryTrack::kTrackNumberFieldNumber;
const int RadarHistoryTrack::kWgs84PosLatFieldNumber;
const int RadarHistoryTrack::kWgs84PosLongFieldNumber;
const int RadarHistoryTrack::kTimeOfDayFieldNumber;
const int RadarHistoryTrack::kTrackTypeFieldNumber;
const int RadarHistoryTrack::kExtrapolationFieldNumber;
const int RadarHistoryTrack::kTrackPositionCodeFieldNumber;
const int RadarHistoryTrack::kCogFieldNumber;
const int RadarHistoryTrack::kSogFieldNumber;
const int RadarHistoryTrack::kUTCFieldNumber;
#endif  // !_MSC_VER

RadarHistoryTrack::RadarHistoryTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarHistoryTrack)
}

void RadarHistoryTrack::InitAsDefaultInstance() {
}

RadarHistoryTrack::RadarHistoryTrack(const RadarHistoryTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryTrack)
}

void RadarHistoryTrack::SharedCtor() {
  _cached_size_ = 0;
  tracknumber_ = GOOGLE_LONGLONG(0);
  wgs84poslat_ = 0;
  wgs84poslong_ = 0;
  timeofday_ = 0;
  tracktype_ = 0;
  extrapolation_ = 0;
  trackpositioncode_ = 0;
  cog_ = 0;
  sog_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarHistoryTrack::~RadarHistoryTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryTrack)
  SharedDtor();
}

void RadarHistoryTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarHistoryTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarHistoryTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarHistoryTrack_descriptor_;
}

const RadarHistoryTrack& RadarHistoryTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadar_2eproto();
  return *default_instance_;
}

RadarHistoryTrack* RadarHistoryTrack::default_instance_ = NULL;

RadarHistoryTrack* RadarHistoryTrack::New() const {
  return new RadarHistoryTrack;
}

void RadarHistoryTrack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarHistoryTrack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tracknumber_, cog_);
  }
  ZR_(sog_, utc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarHistoryTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 trackNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tracknumber_)));
          set_has_tracknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_wgs84PosLat;
        break;
      }

      // required double wgs84PosLat = 2;
      case 2: {
        if (tag == 17) {
         parse_wgs84PosLat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslat_)));
          set_has_wgs84poslat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_wgs84PosLong;
        break;
      }

      // required double wgs84PosLong = 3;
      case 3: {
        if (tag == 25) {
         parse_wgs84PosLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslong_)));
          set_has_wgs84poslong();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_timeOfDay;
        break;
      }

      // required float timeOfDay = 4;
      case 4: {
        if (tag == 37) {
         parse_timeOfDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeofday_)));
          set_has_timeofday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_trackType;
        break;
      }

      // optional .com.zhichenhaixin.proto.CNF trackType = 5;
      case 5: {
        if (tag == 40) {
         parse_trackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::CNF_IsValid(value)) {
            set_tracktype(static_cast< ::com::zhichenhaixin::proto::CNF >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_extrapolation;
        break;
      }

      // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
      case 7: {
        if (tag == 56) {
         parse_extrapolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::CST_IsValid(value)) {
            set_extrapolation(static_cast< ::com::zhichenhaixin::proto::CST >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_trackPositionCode;
        break;
      }

      // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
      case 8: {
        if (tag == 64) {
         parse_trackPositionCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::STH_IsValid(value)) {
            set_trackpositioncode(static_cast< ::com::zhichenhaixin::proto::STH >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_cog;
        break;
      }

      // required double cog = 9;
      case 9: {
        if (tag == 73) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_sog;
        break;
      }

      // required double sog = 10;
      case 10: {
        if (tag == 81) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 11;
      case 11: {
        if (tag == 88) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarHistoryTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarHistoryTrack)
  return false;
#undef DO_
}

void RadarHistoryTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  // required int64 trackNumber = 1;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tracknumber(), output);
  }

  // required double wgs84PosLat = 2;
  if (has_wgs84poslat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wgs84poslat(), output);
  }

  // required double wgs84PosLong = 3;
  if (has_wgs84poslong()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->wgs84poslong(), output);
  }

  // required float timeOfDay = 4;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->timeofday(), output);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 5;
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tracktype(), output);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
  if (has_extrapolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->extrapolation(), output);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
  if (has_trackpositioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->trackpositioncode(), output);
  }

  // required double cog = 9;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->cog(), output);
  }

  // required double sog = 10;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->sog(), output);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarHistoryTrack)
}

::google::protobuf::uint8* RadarHistoryTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  // required int64 trackNumber = 1;
  if (has_tracknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tracknumber(), target);
  }

  // required double wgs84PosLat = 2;
  if (has_wgs84poslat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wgs84poslat(), target);
  }

  // required double wgs84PosLong = 3;
  if (has_wgs84poslong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->wgs84poslong(), target);
  }

  // required float timeOfDay = 4;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 5;
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tracktype(), target);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
  if (has_extrapolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->extrapolation(), target);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
  if (has_trackpositioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->trackpositioncode(), target);
  }

  // required double cog = 9;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->cog(), target);
  }

  // required double sog = 10;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->sog(), target);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryTrack)
  return target;
}

int RadarHistoryTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 trackNumber = 1;
    if (has_tracknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tracknumber());
    }

    // required double wgs84PosLat = 2;
    if (has_wgs84poslat()) {
      total_size += 1 + 8;
    }

    // required double wgs84PosLong = 3;
    if (has_wgs84poslong()) {
      total_size += 1 + 8;
    }

    // required float timeOfDay = 4;
    if (has_timeofday()) {
      total_size += 1 + 4;
    }

    // optional .com.zhichenhaixin.proto.CNF trackType = 5;
    if (has_tracktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracktype());
    }

    // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
    if (has_extrapolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->extrapolation());
    }

    // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
    if (has_trackpositioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackpositioncode());
    }

    // required double cog = 9;
    if (has_cog()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double sog = 10;
    if (has_sog()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 11;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarHistoryTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarHistoryTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarHistoryTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarHistoryTrack::MergeFrom(const RadarHistoryTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tracknumber()) {
      set_tracknumber(from.tracknumber());
    }
    if (from.has_wgs84poslat()) {
      set_wgs84poslat(from.wgs84poslat());
    }
    if (from.has_wgs84poslong()) {
      set_wgs84poslong(from.wgs84poslong());
    }
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_extrapolation()) {
      set_extrapolation(from.extrapolation());
    }
    if (from.has_trackpositioncode()) {
      set_trackpositioncode(from.trackpositioncode());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarHistoryTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryTrack::CopyFrom(const RadarHistoryTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000038f) != 0x0000038f) return false;

  return true;
}

void RadarHistoryTrack::Swap(RadarHistoryTrack* other) {
  if (other != this) {
    std::swap(tracknumber_, other->tracknumber_);
    std::swap(wgs84poslat_, other->wgs84poslat_);
    std::swap(wgs84poslong_, other->wgs84poslong_);
    std::swap(timeofday_, other->timeofday_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(extrapolation_, other->extrapolation_);
    std::swap(trackpositioncode_, other->trackpositioncode_);
    std::swap(cog_, other->cog_);
    std::swap(sog_, other->sog_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarHistoryTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarHistoryTrack_descriptor_;
  metadata.reflection = RadarHistoryTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarHistoryTracks::kTrackFieldNumber;
#endif  // !_MSC_VER

RadarHistoryTracks::RadarHistoryTracks()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarHistoryTracks)
}

void RadarHistoryTracks::InitAsDefaultInstance() {
}

RadarHistoryTracks::RadarHistoryTracks(const RadarHistoryTracks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryTracks)
}

void RadarHistoryTracks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarHistoryTracks::~RadarHistoryTracks() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryTracks)
  SharedDtor();
}

void RadarHistoryTracks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarHistoryTracks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarHistoryTracks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarHistoryTracks_descriptor_;
}

const RadarHistoryTracks& RadarHistoryTracks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadar_2eproto();
  return *default_instance_;
}

RadarHistoryTracks* RadarHistoryTracks::default_instance_ = NULL;

RadarHistoryTracks* RadarHistoryTracks::New() const {
  return new RadarHistoryTracks;
}

void RadarHistoryTracks::Clear() {
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarHistoryTracks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
      case 1: {
        if (tag == 10) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_track;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarHistoryTracks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarHistoryTracks)
  return false;
#undef DO_
}

void RadarHistoryTracks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->track(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarHistoryTracks)
}

::google::protobuf::uint8* RadarHistoryTracks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->track(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryTracks)
  return target;
}

int RadarHistoryTracks::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  total_size += 1 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarHistoryTracks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarHistoryTracks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarHistoryTracks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarHistoryTracks::MergeFrom(const RadarHistoryTracks& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarHistoryTracks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryTracks::CopyFrom(const RadarHistoryTracks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryTracks::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->track())) return false;
  return true;
}

void RadarHistoryTracks::Swap(RadarHistoryTracks* other) {
  if (other != this) {
    track_.Swap(&other->track_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarHistoryTracks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarHistoryTracks_descriptor_;
  metadata.reflection = RadarHistoryTracks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackPoint::kSystemAreaCodeFieldNumber;
const int TrackPoint::kSystemIdentificationCodeFieldNumber;
const int TrackPoint::kMessageTypeFieldNumber;
const int TrackPoint::kTrackNumberFieldNumber;
const int TrackPoint::kCartesianPosXFieldNumber;
const int TrackPoint::kCartesianPosYFieldNumber;
const int TrackPoint::kWgs84PosLatFieldNumber;
const int TrackPoint::kWgs84PosLongFieldNumber;
const int TrackPoint::kTimeOfDayFieldNumber;
const int TrackPoint::kTrackTypeFieldNumber;
const int TrackPoint::kTrackLastReportFieldNumber;
const int TrackPoint::kExtrapolationFieldNumber;
const int TrackPoint::kTrackPositionCodeFieldNumber;
const int TrackPoint::kSigmaXFieldNumber;
const int TrackPoint::kSigmaYFieldNumber;
const int TrackPoint::kSigmaXYFieldNumber;
const int TrackPoint::kAmpOfPriPlotFieldNumber;
const int TrackPoint::kCartesianTrkVelVxFieldNumber;
const int TrackPoint::kCartesianTrkVelVyFieldNumber;
const int TrackPoint::kCogFieldNumber;
const int TrackPoint::kSogFieldNumber;
const int TrackPoint::kFleetNumberFieldNumber;
const int TrackPoint::kStatusFieldNumber;
const int TrackPoint::kLonTypeFieldNumber;
const int TrackPoint::kLatTypeFieldNumber;
const int TrackPoint::kTypeFieldNumber;
const int TrackPoint::kAisidFieldNumber;
const int TrackPoint::kTracksFieldNumber;
const int TrackPoint::kDiameterFieldNumber;
#endif  // !_MSC_VER

TrackPoint::TrackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::InitAsDefaultInstance() {
  tracks_ = const_cast< ::com::zhichenhaixin::proto::RadarHistoryTracks*>(&::com::zhichenhaixin::proto::RadarHistoryTracks::default_instance());
}

TrackPoint::TrackPoint(const TrackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  systemareacode_ = 0;
  systemidentificationcode_ = 0;
  messagetype_ = 0;
  tracknumber_ = 0u;
  cartesianposx_ = 0;
  cartesianposy_ = 0;
  wgs84poslat_ = 0;
  wgs84poslong_ = 0;
  timeofday_ = 0;
  tracktype_ = 0;
  tracklastreport_ = false;
  extrapolation_ = 0;
  trackpositioncode_ = 0;
  sigmax_ = 0;
  sigmay_ = 0;
  sigmaxy_ = 0;
  ampofpriplot_ = 0;
  cartesiantrkvel_vx_ = 0;
  cartesiantrkvel_vy_ = 0;
  cog_ = 0;
  sog_ = 0;
  fleetnumber_ = 0;
  status_ = 0;
  lontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  aisid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracks_ = NULL;
  diameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackPoint::~TrackPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.TrackPoint)
  SharedDtor();
}

void TrackPoint::SharedDtor() {
  if (lontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lontype_;
  }
  if (lattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lattype_;
  }
  if (aisid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete aisid_;
  }
  if (this != default_instance_) {
    delete tracks_;
  }
}

void TrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackPoint_descriptor_;
}

const TrackPoint& TrackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadar_2eproto();
  return *default_instance_;
}

TrackPoint* TrackPoint::default_instance_ = NULL;

TrackPoint* TrackPoint::New() const {
  return new TrackPoint;
}

void TrackPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrackPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(systemareacode_, wgs84poslong_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(timeofday_, sigmaxy_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(cartesiantrkvel_vx_, sog_);
    status_ = 0;
    if (has_lontype()) {
      if (lontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lontype_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 520093696) {
    if (has_lattype()) {
      if (lattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lattype_->clear();
      }
    }
    type_ = 0;
    if (has_aisid()) {
      if (aisid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        aisid_->clear();
      }
    }
    if (has_tracks()) {
      if (tracks_ != NULL) tracks_->::com::zhichenhaixin::proto::RadarHistoryTracks::Clear();
    }
    diameter_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.TrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 systemAreaCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemareacode_)));
          set_has_systemareacode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_systemIdentificationCode;
        break;
      }

      // required int32 systemIdentificationCode = 2;
      case 2: {
        if (tag == 16) {
         parse_systemIdentificationCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemidentificationcode_)));
          set_has_systemidentificationcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messageType;
        break;
      }

      // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
      case 3: {
        if (tag == 24) {
         parse_messageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::MSGTYP_IsValid(value)) {
            set_messagetype(static_cast< ::com::zhichenhaixin::proto::MSGTYP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trackNumber;
        break;
      }

      // required uint32 trackNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_trackNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracknumber_)));
          set_has_tracknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cartesianPosX;
        break;
      }

      // required float cartesianPosX = 5;
      case 5: {
        if (tag == 45) {
         parse_cartesianPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cartesianposx_)));
          set_has_cartesianposx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cartesianPosY;
        break;
      }

      // required float cartesianPosY = 6;
      case 6: {
        if (tag == 53) {
         parse_cartesianPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cartesianposy_)));
          set_has_cartesianposy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_wgs84PosLat;
        break;
      }

      // required double wgs84PosLat = 7;
      case 7: {
        if (tag == 57) {
         parse_wgs84PosLat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslat_)));
          set_has_wgs84poslat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_wgs84PosLong;
        break;
      }

      // required double wgs84PosLong = 8;
      case 8: {
        if (tag == 65) {
         parse_wgs84PosLong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslong_)));
          set_has_wgs84poslong();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_timeOfDay;
        break;
      }

      // required float timeOfDay = 9;
      case 9: {
        if (tag == 77) {
         parse_timeOfDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeofday_)));
          set_has_timeofday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_trackType;
        break;
      }

      // optional .com.zhichenhaixin.proto.CNF trackType = 10;
      case 10: {
        if (tag == 80) {
         parse_trackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::CNF_IsValid(value)) {
            set_tracktype(static_cast< ::com::zhichenhaixin::proto::CNF >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_trackLastReport;
        break;
      }

      // optional bool trackLastReport = 11;
      case 11: {
        if (tag == 88) {
         parse_trackLastReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracklastreport_)));
          set_has_tracklastreport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_extrapolation;
        break;
      }

      // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
      case 12: {
        if (tag == 96) {
         parse_extrapolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::CST_IsValid(value)) {
            set_extrapolation(static_cast< ::com::zhichenhaixin::proto::CST >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_trackPositionCode;
        break;
      }

      // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
      case 13: {
        if (tag == 104) {
         parse_trackPositionCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::STH_IsValid(value)) {
            set_trackpositioncode(static_cast< ::com::zhichenhaixin::proto::STH >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_sigmaX;
        break;
      }

      // optional float sigmaX = 14;
      case 14: {
        if (tag == 117) {
         parse_sigmaX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmax_)));
          set_has_sigmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_sigmaY;
        break;
      }

      // optional float sigmaY = 15;
      case 15: {
        if (tag == 125) {
         parse_sigmaY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmay_)));
          set_has_sigmay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_sigmaXY;
        break;
      }

      // optional float sigmaXY = 16;
      case 16: {
        if (tag == 133) {
         parse_sigmaXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmaxy_)));
          set_has_sigmaxy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_ampOfPriPlot;
        break;
      }

      // optional float ampOfPriPlot = 17;
      case 17: {
        if (tag == 141) {
         parse_ampOfPriPlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ampofpriplot_)));
          set_has_ampofpriplot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_cartesianTrkVel_vx;
        break;
      }

      // required double cartesianTrkVel_vx = 18;
      case 18: {
        if (tag == 145) {
         parse_cartesianTrkVel_vx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cartesiantrkvel_vx_)));
          set_has_cartesiantrkvel_vx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_cartesianTrkVel_vy;
        break;
      }

      // required double cartesianTrkVel_vy = 19;
      case 19: {
        if (tag == 153) {
         parse_cartesianTrkVel_vy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cartesiantrkvel_vy_)));
          set_has_cartesiantrkvel_vy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_cog;
        break;
      }

      // required double cog = 20;
      case 20: {
        if (tag == 161) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_sog;
        break;
      }

      // required double sog = 21;
      case 21: {
        if (tag == 169) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_fleetNumber;
        break;
      }

      // optional int32 fleetNumber = 22;
      case 22: {
        if (tag == 176) {
         parse_fleetNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fleetnumber_)));
          set_has_fleetnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_status;
        break;
      }

      // optional int32 status = 23;
      case 23: {
        if (tag == 184) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_lonType;
        break;
      }

      // optional string lonType = 24;
      case 24: {
        if (tag == 194) {
         parse_lonType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lontype().data(), this->lontype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lontype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_latType;
        break;
      }

      // optional string latType = 25;
      case 25: {
        if (tag == 202) {
         parse_latType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lattype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lattype().data(), this->lattype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lattype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_type;
        break;
      }

      // optional int32 type = 26;
      case 26: {
        if (tag == 208) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_aisid;
        break;
      }

      // optional string aisid = 27;
      case 27: {
        if (tag == 218) {
         parse_aisid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aisid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->aisid().data(), this->aisid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "aisid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_tracks;
        break;
      }

      // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
      case 28: {
        if (tag == 226) {
         parse_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_diameter;
        break;
      }

      // optional int32 diameter = 29;
      case 29: {
        if (tag == 232) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.TrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.TrackPoint)
  return false;
#undef DO_
}

void TrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.TrackPoint)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->systemareacode(), output);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systemidentificationcode(), output);
  }

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->messagetype(), output);
  }

  // required uint32 trackNumber = 4;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tracknumber(), output);
  }

  // required float cartesianPosX = 5;
  if (has_cartesianposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cartesianposx(), output);
  }

  // required float cartesianPosY = 6;
  if (has_cartesianposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cartesianposy(), output);
  }

  // required double wgs84PosLat = 7;
  if (has_wgs84poslat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wgs84poslat(), output);
  }

  // required double wgs84PosLong = 8;
  if (has_wgs84poslong()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->wgs84poslong(), output);
  }

  // required float timeOfDay = 9;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->timeofday(), output);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->tracktype(), output);
  }

  // optional bool trackLastReport = 11;
  if (has_tracklastreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tracklastreport(), output);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  if (has_extrapolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->extrapolation(), output);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  if (has_trackpositioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->trackpositioncode(), output);
  }

  // optional float sigmaX = 14;
  if (has_sigmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sigmax(), output);
  }

  // optional float sigmaY = 15;
  if (has_sigmay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sigmay(), output);
  }

  // optional float sigmaXY = 16;
  if (has_sigmaxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->sigmaxy(), output);
  }

  // optional float ampOfPriPlot = 17;
  if (has_ampofpriplot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ampofpriplot(), output);
  }

  // required double cartesianTrkVel_vx = 18;
  if (has_cartesiantrkvel_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->cartesiantrkvel_vx(), output);
  }

  // required double cartesianTrkVel_vy = 19;
  if (has_cartesiantrkvel_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->cartesiantrkvel_vy(), output);
  }

  // required double cog = 20;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->cog(), output);
  }

  // required double sog = 21;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->sog(), output);
  }

  // optional int32 fleetNumber = 22;
  if (has_fleetnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->fleetnumber(), output);
  }

  // optional int32 status = 23;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->status(), output);
  }

  // optional string lonType = 24;
  if (has_lontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lontype().data(), this->lontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lontype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->lontype(), output);
  }

  // optional string latType = 25;
  if (has_lattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lattype().data(), this->lattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lattype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->lattype(), output);
  }

  // optional int32 type = 26;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->type(), output);
  }

  // optional string aisid = 27;
  if (has_aisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aisid().data(), this->aisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aisid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->aisid(), output);
  }

  // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
  if (has_tracks()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->tracks(), output);
  }

  // optional int32 diameter = 29;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->diameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.TrackPoint)
}

::google::protobuf::uint8* TrackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.TrackPoint)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systemidentificationcode(), target);
  }

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->messagetype(), target);
  }

  // required uint32 trackNumber = 4;
  if (has_tracknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tracknumber(), target);
  }

  // required float cartesianPosX = 5;
  if (has_cartesianposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cartesianposx(), target);
  }

  // required float cartesianPosY = 6;
  if (has_cartesianposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cartesianposy(), target);
  }

  // required double wgs84PosLat = 7;
  if (has_wgs84poslat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wgs84poslat(), target);
  }

  // required double wgs84PosLong = 8;
  if (has_wgs84poslong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->wgs84poslong(), target);
  }

  // required float timeOfDay = 9;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->tracktype(), target);
  }

  // optional bool trackLastReport = 11;
  if (has_tracklastreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tracklastreport(), target);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  if (has_extrapolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->extrapolation(), target);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  if (has_trackpositioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->trackpositioncode(), target);
  }

  // optional float sigmaX = 14;
  if (has_sigmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sigmax(), target);
  }

  // optional float sigmaY = 15;
  if (has_sigmay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sigmay(), target);
  }

  // optional float sigmaXY = 16;
  if (has_sigmaxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->sigmaxy(), target);
  }

  // optional float ampOfPriPlot = 17;
  if (has_ampofpriplot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->ampofpriplot(), target);
  }

  // required double cartesianTrkVel_vx = 18;
  if (has_cartesiantrkvel_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->cartesiantrkvel_vx(), target);
  }

  // required double cartesianTrkVel_vy = 19;
  if (has_cartesiantrkvel_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->cartesiantrkvel_vy(), target);
  }

  // required double cog = 20;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->cog(), target);
  }

  // required double sog = 21;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->sog(), target);
  }

  // optional int32 fleetNumber = 22;
  if (has_fleetnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->fleetnumber(), target);
  }

  // optional int32 status = 23;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->status(), target);
  }

  // optional string lonType = 24;
  if (has_lontype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lontype().data(), this->lontype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lontype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->lontype(), target);
  }

  // optional string latType = 25;
  if (has_lattype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lattype().data(), this->lattype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lattype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->lattype(), target);
  }

  // optional int32 type = 26;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->type(), target);
  }

  // optional string aisid = 27;
  if (has_aisid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->aisid().data(), this->aisid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "aisid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->aisid(), target);
  }

  // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
  if (has_tracks()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->tracks(), target);
  }

  // optional int32 diameter = 29;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->diameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.TrackPoint)
  return target;
}

int TrackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 systemAreaCode = 1;
    if (has_systemareacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systemareacode());
    }

    // required int32 systemIdentificationCode = 2;
    if (has_systemidentificationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systemidentificationcode());
    }

    // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
    if (has_messagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
    }

    // required uint32 trackNumber = 4;
    if (has_tracknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracknumber());
    }

    // required float cartesianPosX = 5;
    if (has_cartesianposx()) {
      total_size += 1 + 4;
    }

    // required float cartesianPosY = 6;
    if (has_cartesianposy()) {
      total_size += 1 + 4;
    }

    // required double wgs84PosLat = 7;
    if (has_wgs84poslat()) {
      total_size += 1 + 8;
    }

    // required double wgs84PosLong = 8;
    if (has_wgs84poslong()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float timeOfDay = 9;
    if (has_timeofday()) {
      total_size += 1 + 4;
    }

    // optional .com.zhichenhaixin.proto.CNF trackType = 10;
    if (has_tracktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracktype());
    }

    // optional bool trackLastReport = 11;
    if (has_tracklastreport()) {
      total_size += 1 + 1;
    }

    // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
    if (has_extrapolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->extrapolation());
    }

    // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
    if (has_trackpositioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackpositioncode());
    }

    // optional float sigmaX = 14;
    if (has_sigmax()) {
      total_size += 1 + 4;
    }

    // optional float sigmaY = 15;
    if (has_sigmay()) {
      total_size += 1 + 4;
    }

    // optional float sigmaXY = 16;
    if (has_sigmaxy()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float ampOfPriPlot = 17;
    if (has_ampofpriplot()) {
      total_size += 2 + 4;
    }

    // required double cartesianTrkVel_vx = 18;
    if (has_cartesiantrkvel_vx()) {
      total_size += 2 + 8;
    }

    // required double cartesianTrkVel_vy = 19;
    if (has_cartesiantrkvel_vy()) {
      total_size += 2 + 8;
    }

    // required double cog = 20;
    if (has_cog()) {
      total_size += 2 + 8;
    }

    // required double sog = 21;
    if (has_sog()) {
      total_size += 2 + 8;
    }

    // optional int32 fleetNumber = 22;
    if (has_fleetnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fleetnumber());
    }

    // optional int32 status = 23;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string lonType = 24;
    if (has_lontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lontype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string latType = 25;
    if (has_lattype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lattype());
    }

    // optional int32 type = 26;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string aisid = 27;
    if (has_aisid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aisid());
    }

    // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
    if (has_tracks()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tracks());
    }

    // optional int32 diameter = 29;
    if (has_diameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackPoint::MergeFrom(const TrackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemareacode()) {
      set_systemareacode(from.systemareacode());
    }
    if (from.has_systemidentificationcode()) {
      set_systemidentificationcode(from.systemidentificationcode());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_tracknumber()) {
      set_tracknumber(from.tracknumber());
    }
    if (from.has_cartesianposx()) {
      set_cartesianposx(from.cartesianposx());
    }
    if (from.has_cartesianposy()) {
      set_cartesianposy(from.cartesianposy());
    }
    if (from.has_wgs84poslat()) {
      set_wgs84poslat(from.wgs84poslat());
    }
    if (from.has_wgs84poslong()) {
      set_wgs84poslong(from.wgs84poslong());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_tracklastreport()) {
      set_tracklastreport(from.tracklastreport());
    }
    if (from.has_extrapolation()) {
      set_extrapolation(from.extrapolation());
    }
    if (from.has_trackpositioncode()) {
      set_trackpositioncode(from.trackpositioncode());
    }
    if (from.has_sigmax()) {
      set_sigmax(from.sigmax());
    }
    if (from.has_sigmay()) {
      set_sigmay(from.sigmay());
    }
    if (from.has_sigmaxy()) {
      set_sigmaxy(from.sigmaxy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ampofpriplot()) {
      set_ampofpriplot(from.ampofpriplot());
    }
    if (from.has_cartesiantrkvel_vx()) {
      set_cartesiantrkvel_vx(from.cartesiantrkvel_vx());
    }
    if (from.has_cartesiantrkvel_vy()) {
      set_cartesiantrkvel_vy(from.cartesiantrkvel_vy());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_fleetnumber()) {
      set_fleetnumber(from.fleetnumber());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_lontype()) {
      set_lontype(from.lontype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lattype()) {
      set_lattype(from.lattype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_aisid()) {
      set_aisid(from.aisid());
    }
    if (from.has_tracks()) {
      mutable_tracks()->::com::zhichenhaixin::proto::RadarHistoryTracks::MergeFrom(from.tracks());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPoint::CopyFrom(const TrackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x001e01ff) != 0x001e01ff) return false;

  if (has_tracks()) {
    if (!this->tracks().IsInitialized()) return false;
  }
  return true;
}

void TrackPoint::Swap(TrackPoint* other) {
  if (other != this) {
    std::swap(systemareacode_, other->systemareacode_);
    std::swap(systemidentificationcode_, other->systemidentificationcode_);
    std::swap(messagetype_, other->messagetype_);
    std::swap(tracknumber_, other->tracknumber_);
    std::swap(cartesianposx_, other->cartesianposx_);
    std::swap(cartesianposy_, other->cartesianposy_);
    std::swap(wgs84poslat_, other->wgs84poslat_);
    std::swap(wgs84poslong_, other->wgs84poslong_);
    std::swap(timeofday_, other->timeofday_);
    std::swap(tracktype_, other->tracktype_);
    std::swap(tracklastreport_, other->tracklastreport_);
    std::swap(extrapolation_, other->extrapolation_);
    std::swap(trackpositioncode_, other->trackpositioncode_);
    std::swap(sigmax_, other->sigmax_);
    std::swap(sigmay_, other->sigmay_);
    std::swap(sigmaxy_, other->sigmaxy_);
    std::swap(ampofpriplot_, other->ampofpriplot_);
    std::swap(cartesiantrkvel_vx_, other->cartesiantrkvel_vx_);
    std::swap(cartesiantrkvel_vy_, other->cartesiantrkvel_vy_);
    std::swap(cog_, other->cog_);
    std::swap(sog_, other->sog_);
    std::swap(fleetnumber_, other->fleetnumber_);
    std::swap(status_, other->status_);
    std::swap(lontype_, other->lontype_);
    std::swap(lattype_, other->lattype_);
    std::swap(type_, other->type_);
    std::swap(aisid_, other->aisid_);
    std::swap(tracks_, other->tracks_);
    std::swap(diameter_, other->diameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackPoint_descriptor_;
  metadata.reflection = TrackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarSurfaceTrack::kFlagFieldNumber;
const int RadarSurfaceTrack::kSourceIdFieldNumber;
const int RadarSurfaceTrack::kUTCFieldNumber;
const int RadarSurfaceTrack::kLengthFieldNumber;
const int RadarSurfaceTrack::kTrackPointsFieldNumber;
#endif  // !_MSC_VER

RadarSurfaceTrack::RadarSurfaceTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::InitAsDefaultInstance() {
}

RadarSurfaceTrack::RadarSurfaceTrack(const RadarSurfaceTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_ = GOOGLE_ULONGLONG(0);
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSurfaceTrack::~RadarSurfaceTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
  SharedDtor();
}

void RadarSurfaceTrack::SharedDtor() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (this != default_instance_) {
  }
}

void RadarSurfaceTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSurfaceTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSurfaceTrack_descriptor_;
}

const RadarSurfaceTrack& RadarSurfaceTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadar_2eproto();
  return *default_instance_;
}

RadarSurfaceTrack* RadarSurfaceTrack::default_instance_ = NULL;

RadarSurfaceTrack* RadarSurfaceTrack::New() const {
  return new RadarSurfaceTrack;
}

void RadarSurfaceTrack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarSurfaceTrack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(flag_, utc_);
    if (has_sourceid()) {
      if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  trackpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarSurfaceTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourceId;
        break;
      }

      // required string sourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_sourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 3;
      case 3: {
        if (tag == 24) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required int32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trackPoints;
        break;
      }

      // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
      case 5: {
        if (tag == 42) {
         parse_trackPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trackpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trackPoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return false;
#undef DO_
}

void RadarSurfaceTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceid(), output);
  }

  // required uint64 UTC = 3;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->utc(), output);
  }

  // required int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (int i = 0; i < this->trackpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trackpoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

::google::protobuf::uint8* RadarSurfaceTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceid(), target);
  }

  // required uint64 UTC = 3;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->utc(), target);
  }

  // required int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (int i = 0; i < this->trackpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trackpoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return target;
}

int RadarSurfaceTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceid());
    }

    // required uint64 UTC = 3;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  total_size += 1 * this->trackpoints_size();
  for (int i = 0; i < this->trackpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trackpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSurfaceTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarSurfaceTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarSurfaceTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarSurfaceTrack::MergeFrom(const RadarSurfaceTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  trackpoints_.MergeFrom(from.trackpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarSurfaceTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSurfaceTrack::CopyFrom(const RadarSurfaceTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSurfaceTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->trackpoints())) return false;
  return true;
}

void RadarSurfaceTrack::Swap(RadarSurfaceTrack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(utc_, other->utc_);
    std::swap(length_, other->length_);
    trackpoints_.Swap(&other->trackpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarSurfaceTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSurfaceTrack_descriptor_;
  metadata.reflection = RadarSurfaceTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoFrame::kSystemAreaCodeFieldNumber;
const int VideoFrame::kSystemIdentificationCodeFieldNumber;
const int VideoFrame::kMsgIndexFieldNumber;
const int VideoFrame::kAzimuthFieldNumber;
const int VideoFrame::kHeadingFieldNumber;
const int VideoFrame::kStartRangeFieldNumber;
const int VideoFrame::kRangeFactorFieldNumber;
const int VideoFrame::kBitResolutionFieldNumber;
const int VideoFrame::kTimeOfDayFieldNumber;
const int VideoFrame::kAmplitudeFieldNumber;
#endif  // !_MSC_VER

VideoFrame::VideoFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VideoFrame)
}

void VideoFrame::InitAsDefaultInstance() {
}

VideoFrame::VideoFrame(const VideoFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VideoFrame)
}

void VideoFrame::SharedCtor() {
  _cached_size_ = 0;
  systemareacode_ = 0;
  systemidentificationcode_ = 0;
  msgindex_ = 0;
  azimuth_ = 0u;
  heading_ = 0u;
  startrange_ = 0;
  rangefactor_ = 0;
  bitresolution_ = 1;
  timeofday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VideoFrame)
  SharedDtor();
}

void VideoFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFrame_descriptor_;
}

const VideoFrame& VideoFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadar_2eproto();
  return *default_instance_;
}

VideoFrame* VideoFrame::default_instance_ = NULL;

VideoFrame* VideoFrame::New() const {
  return new VideoFrame;
}

void VideoFrame::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VideoFrame*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(systemareacode_, heading_);
    rangefactor_ = 0;
    bitresolution_ = 1;
  }
  timeofday_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  amplitude_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VideoFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 systemAreaCode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemareacode_)));
          set_has_systemareacode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_systemIdentificationCode;
        break;
      }

      // required int32 systemIdentificationCode = 2;
      case 2: {
        if (tag == 16) {
         parse_systemIdentificationCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemidentificationcode_)));
          set_has_systemidentificationcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgIndex;
        break;
      }

      // required int32 msgIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_msgIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgindex_)));
          set_has_msgindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_azimuth;
        break;
      }

      // required uint32 azimuth = 4;
      case 4: {
        if (tag == 32) {
         parse_azimuth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &azimuth_)));
          set_has_azimuth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 5;
      case 5: {
        if (tag == 40) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_startRange;
        break;
      }

      // required double startRange = 6;
      case 6: {
        if (tag == 49) {
         parse_startRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startrange_)));
          set_has_startrange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rangeFactor;
        break;
      }

      // required double rangeFactor = 7;
      case 7: {
        if (tag == 57) {
         parse_rangeFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rangefactor_)));
          set_has_rangefactor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bitResolution;
        break;
      }

      // required .com.zhichenhaixin.proto.RES bitResolution = 8;
      case 8: {
        if (tag == 64) {
         parse_bitResolution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::RES_IsValid(value)) {
            set_bitresolution(static_cast< ::com::zhichenhaixin::proto::RES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeOfDay;
        break;
      }

      // required int32 timeOfDay = 9;
      case 9: {
        if (tag == 72) {
         parse_timeOfDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeofday_)));
          set_has_timeofday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_amplitude;
        break;
      }

      // repeated int32 amplitude = 10;
      case 10: {
        if (tag == 80) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_amplitude())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_amplitude())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_amplitude;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VideoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VideoFrame)
  return false;
#undef DO_
}

void VideoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VideoFrame)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->systemareacode(), output);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systemidentificationcode(), output);
  }

  // required int32 msgIndex = 3;
  if (has_msgindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgindex(), output);
  }

  // required uint32 azimuth = 4;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->azimuth(), output);
  }

  // optional uint32 heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heading(), output);
  }

  // required double startRange = 6;
  if (has_startrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->startrange(), output);
  }

  // required double rangeFactor = 7;
  if (has_rangefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rangefactor(), output);
  }

  // required .com.zhichenhaixin.proto.RES bitResolution = 8;
  if (has_bitresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bitresolution(), output);
  }

  // required int32 timeOfDay = 9;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timeofday(), output);
  }

  // repeated int32 amplitude = 10;
  for (int i = 0; i < this->amplitude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->amplitude(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VideoFrame)
}

::google::protobuf::uint8* VideoFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VideoFrame)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systemidentificationcode(), target);
  }

  // required int32 msgIndex = 3;
  if (has_msgindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgindex(), target);
  }

  // required uint32 azimuth = 4;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->azimuth(), target);
  }

  // optional uint32 heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heading(), target);
  }

  // required double startRange = 6;
  if (has_startrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->startrange(), target);
  }

  // required double rangeFactor = 7;
  if (has_rangefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rangefactor(), target);
  }

  // required .com.zhichenhaixin.proto.RES bitResolution = 8;
  if (has_bitresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bitresolution(), target);
  }

  // required int32 timeOfDay = 9;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timeofday(), target);
  }

  // repeated int32 amplitude = 10;
  for (int i = 0; i < this->amplitude_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->amplitude(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VideoFrame)
  return target;
}

int VideoFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 systemAreaCode = 1;
    if (has_systemareacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systemareacode());
    }

    // required int32 systemIdentificationCode = 2;
    if (has_systemidentificationcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->systemidentificationcode());
    }

    // required int32 msgIndex = 3;
    if (has_msgindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msgindex());
    }

    // required uint32 azimuth = 4;
    if (has_azimuth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->azimuth());
    }

    // optional uint32 heading = 5;
    if (has_heading()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heading());
    }

    // required double startRange = 6;
    if (has_startrange()) {
      total_size += 1 + 8;
    }

    // required double rangeFactor = 7;
    if (has_rangefactor()) {
      total_size += 1 + 8;
    }

    // required .com.zhichenhaixin.proto.RES bitResolution = 8;
    if (has_bitresolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitresolution());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 timeOfDay = 9;
    if (has_timeofday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeofday());
    }

  }
  // repeated int32 amplitude = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->amplitude_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->amplitude(i));
    }
    total_size += 1 * this->amplitude_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  amplitude_.MergeFrom(from.amplitude_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemareacode()) {
      set_systemareacode(from.systemareacode());
    }
    if (from.has_systemidentificationcode()) {
      set_systemidentificationcode(from.systemidentificationcode());
    }
    if (from.has_msgindex()) {
      set_msgindex(from.msgindex());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_startrange()) {
      set_startrange(from.startrange());
    }
    if (from.has_rangefactor()) {
      set_rangefactor(from.rangefactor());
    }
    if (from.has_bitresolution()) {
      set_bitresolution(from.bitresolution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  return true;
}

void VideoFrame::Swap(VideoFrame* other) {
  if (other != this) {
    std::swap(systemareacode_, other->systemareacode_);
    std::swap(systemidentificationcode_, other->systemidentificationcode_);
    std::swap(msgindex_, other->msgindex_);
    std::swap(azimuth_, other->azimuth_);
    std::swap(heading_, other->heading_);
    std::swap(startrange_, other->startrange_);
    std::swap(rangefactor_, other->rangefactor_);
    std::swap(bitresolution_, other->bitresolution_);
    std::swap(timeofday_, other->timeofday_);
    amplitude_.Swap(&other->amplitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFrame_descriptor_;
  metadata.reflection = VideoFrame_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
